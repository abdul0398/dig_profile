<style>
    .modal-gallery {
        display: none;
        position: fixed;
        z-index: 11;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-gallery-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        height: 50%;
        overflow-y: auto;
        border-radius: 20px;
        width: 80%;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }

    .close-button {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close-button:hover,
    .close-button:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .upload-area {
        margin: 20px 0;
    }

    #imageList {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 10px;
        margin-top: 20px;
    }

    .image-container-gallery {
        position: relative;
        width: 100%;
        height: 100px;
        border-radius: 20px;
        overflow: hidden;
    }

    .image-container-gallery img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .delete-gallery-button {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: #ff4444;
        border: none;
        color: white;
        padding: 5px 10px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 12px;
    }

    .delete-gallery-button:hover {
        background-color: #cc0000;
    }

</style>
<div id="imageUploadModal-gallery" class="modal-gallery">
    <div class="modal-gallery-content">
        <span class="close-button">&times;</span>
        <h2>Upload Images</h2>
        <div class="upload-area">
            <input accept="image/png, image/jpeg, image/jpg" type="file" id="imageInput" multiple>
            <label for="imageInput">Choose Images</label>
        </div>
        <div id="imageList" class="image-list">

        </div>
    </div>
</div>

<div id="imageUploadModalText-gallery" class="modal-gallery" >
    <div class="modal-gallery-content ">
        <span class="close-button" onclick="closeImageTextModal()">&times;</span>
        <h2>Upload Images</h2>
        <div class="upload-area">
            <input accept="image/png, image/jpeg, image/jpg" type="file" id="imageTextInput" multiple>
            <label for="imageInput">Choose Images</label>
        </div>
        <div id="imageTextList" class="image-list " style="grid-template-columns: repeat(4, 1fr); display: grid;">

        </div>

        <div class="d-flex justify-content-center mt-2">
            <button class="btn" onclick="submitImages()">Save</button>
        </div>
    </div>
</div>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
    const modal_gallery = document.getElementById('imageUploadModal-gallery');
    const closeButton = document.querySelector('.close-button');
    const imageInput = document.getElementById('imageInput');
    const imageList = document.getElementById('imageList');
    
    // Function to close the modal-gallery
    function closeModal_gallery() {
        modal_gallery.style.display = 'none';
        document.getElementsByTagName("body")[0].style.overflow = "auto";
        if (imageInput && imageInput.files) {
            imageInput.value = '';
        }
    }

    // Handle close button click
    closeButton.addEventListener('click', function () {
        closeModal_gallery();
    });

    // Handle file input change
    imageInput.addEventListener('change', async function () {
    const galleryname = document.getElementById("imageUploadModal-gallery").getAttribute("gallery-name");
    if (this.files) {
        try {
            await Promise.all(Array.from(this.files).map(async file => {
                const reader = new FileReader();
                const img_link = await new Promise(resolve => {
                    reader.onload = function (e) {
                        resolve(uploadImage(file, galleryname));
                    };
                    reader.readAsDataURL(file);
                });

                showLoadingOverlay();
                const imgContainer = document.createElement('div');
                imgContainer.classList.add('image-container-gallery');

                const image = document.createElement('img');
                image.src = reader.result;
                image.alt = 'Uploaded Image';
                image.setAttribute("path", img_link);

                const deleteButton = document.createElement('button');
                deleteButton.classList.add('delete-gallery-button');
                deleteButton.innerHTML = `&times;`;
                deleteButton.onclick = async function () {
                    showLoadingOverlay();
                    await deleteImage(image.getAttribute("path"));
                    hideLoadingOverlay();
                    imageList.removeChild(imgContainer);
                };

                imgContainer.appendChild(image);
                imgContainer.appendChild(deleteButton);
                imageList.appendChild(imgContainer);
            }));

            swal.fire({
                title: "Success",
                text: "Upload Successful",
                icon: "success",
                confirmButtonText: "Ok",
                confirmButtonColor: "#002655",
            });
        } catch (error) {
            // Handle any errors that might occur during the process
            console.error(error);
        } finally {
            hideLoadingOverlay();
        }
    }
});


});

    async function deleteImage(imagePath) {
        const id = document.getElementById("profile_id").getAttribute("profile_id");
        const galleryname = document.getElementById("imageUploadModal-gallery").getAttribute("gallery-name");
        try {
            const response = await fetch(`/api/delete/gallery/${id}/${galleryname}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imagePath: imagePath })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            swal.fire({
                title: "Success",
                text: data.message,
                icon: "success",
                confirmButtonText: "Ok",
                confirmButtonColor: "#002655",
            })
        }catch (error) {
            console.error('Delete failed', error);
        }
    }

    function showLoadingOverlay() {
        const overlay = document.querySelector('.overlay_loading');
        overlay.style.display = 'block';
      }

    function hideLoadingOverlay() {
            const overlay = document.querySelector('.overlay_loading');
            overlay.style.display = 'none';
      }

    async function uploadImage(file, galleryname) {
        const id = document.getElementById("profile_id").getAttribute("profile_id");
        const formData = new FormData();
        formData.append('gallery_name',galleryname);
        formData.append('profile_id',id);
        formData.append('dp',false);
        formData.append('image',file);

        try {
            const response = await fetch(`/upload/gallery/${id}`, {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
          
            return data.file;
        } catch (error) {
            console.error('Upload failed', error);
            swal.fire({
                title: "ERROR",
                text: "Upload Failed",
                icon: "error",
                confirmButtonText: "Ok",
                confirmButtonColor: "#002655",
            })
        }
}
















    const imageTextInput = document.getElementById('imageTextInput');
    const imageTextList = document.getElementById('imageTextList');
    const uploadedFiles = [];

    imageTextInput.addEventListener('change', handleImageUpload);

    function handleImageUpload(event) {
        const files = event.target.files;

        console.log(files);
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
            uploadedFiles.push(file);

            reader.onload = function (e) {
                const imagePreview = document.createElement('div');
                imagePreview.classList.add("d-flex", "flex-column", "align-items-center", "justify-content-center", "mx-2", "position-relative")
                imagePreview.classList.add('image-item');
                imagePreview.innerHTML = `
                    <img src="${e.target.result}" style="width:100px; height:100px" class="mb-2" alt="Image Preview">
                    <input type="text" placeholder="Enter Title" style="padding: 5px; border: 1px solid #c6c6c6;" name="title-${i}" class="mb-2 image-title form-control">
                    <input type="text" placeholder="Enter Description" style="padding: 5px; border: 1px solid #c6c6c6;" name="desc-${i}" class="image-desc form-control">
                    <input type="hidden" value="${file.name}" class="image-name">
                    <button style="position: absolute;top: 10px; right: 10px;" class="delete-button" onclick="deleteTextImage(this, ${i})">X</button>
                `;
                imageTextList.appendChild(imagePreview);
            };

            reader.readAsDataURL(file);
        }
    }

    function deleteTextImage(button, index) {
        const imageItem = button.parentElement
        imageItem.remove();
        uploadedFiles.splice(index, 1)
    }

    async function submitImages() {
        const imageItems = document.querySelectorAll('.image-item');
    
    if (imageItems.length === 0) {
        Swal.fire('Error!', 'Please upload at least one image.', 'error');
        return;
    }

    // Validation to check if any title or description is missing for uploaded images
    let hasMissingFields = false;

    imageItems.forEach((item, index) => {
        const title = item.querySelector('.image-title').value || '';
        const description = item.querySelector('.image-desc').value || '';

        if (title.trim() === '' || description.trim() === '') {
            hasMissingFields = true;
        }
    });

    if (hasMissingFields) {
        Swal.fire('Error!', 'Please provide a title and description for each image.', 'error');
        return;
    }

    // Show confirmation dialog using SweetAlert
    const { isConfirmed } = await Swal.fire({
        title: 'Confirm Upload',
        text: 'Are you sure you want to upload these images with their titles and descriptions?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, upload!',
        cancelButtonText: 'No, cancel'
    });





    if (isConfirmed) {







        const formData = new FormData();
        const galleryName = document.getElementById("imageUploadModalText-gallery").getAttribute("gallery-name");
        const id = document.getElementById("profile_id").getAttribute("profile_id");

        formData.append('gallery_name', galleryName);
        formData.append('profile_id', id);
        formData.append('dp', false);

        // Append each image file and its title/description to FormData
        const imageItems = document.querySelectorAll('.image-item');

        imageItems.forEach((item, index) => {
            const title = item.querySelector('.image-title').value || '';
            const description = item.querySelector('.image-desc').value || '';
            const file = uploadedFiles[index]; // Assuming `uploadedFiles` is an array of File objects

            if (file) {
                formData.append('titles[]', title);  // Append title
                formData.append('descriptions[]', description);  // Append description
                formData.append('images[]', file);  // Append image file
            }
        });

        try {
            const response = await fetch('/api/upload-testimonial', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Network response was not ok.');
            }

            const result = await response.json();
            console.log('Upload success:', result);
            Swal.fire('Success!', 'Your images and details have been uploaded.', 'success');
            // Handle success (e.g., show a success message, update UI)
        } catch (error) {
            console.error('Upload failed:', error);
            Swal.fire('Error!', 'There was a problem uploading your images. Please try again.', 'error');
            // Handle error (e.g., show an error message to the user)
        }
    } else {
        // Handle case where user cancels the action
        Swal.fire('Cancelled', 'Your images were not uploaded.', 'info');
    }
}


    function closeImageTextModal(){
        const modal = document.getElementById("imageUploadModalText-gallery");
        modal.style.display = "none";
        document.getElementsByTagName("body")[0].style.overflow = "auto";
        if (imageTextInput) {
            imageTextInput.value = '';
        }
        imageTextList.innerHTML = "";
    }
    </script>