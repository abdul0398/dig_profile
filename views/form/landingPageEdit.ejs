<div id="form_popup" class="close_popup">
  <div class="d-flex p-3 " id="meta_form_popup_inner"
  style="position: fixed; height: 70vh; border-radius: 20px; background-color: #e5e5e5;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);z-index: 999; overflow: auto; width: 800px;">
  <span onclick="closeAllPopups()" id="close_popup_btn" ><i class="fa-solid fa-x"></i></span>
    <div class="form-container w-75">
      <h4 class="text-center">Dynamic Form</h4>
      <form id="dynamic-form">
        <div
          style="text-align: center; margin: 5px; padding: 10px; background-color: #ffffff; border-radius: 5px;">
          <!-- <input class="form_input" id="form_name" type="text" placeholder="Form Name"> -->
          <label>Discord Links</label>
          <div id="discord_metaform_field" style="text-align: start;">
            <div id="discord_container">

            </div>
            <div class="discord-input-container-metaform" >
                <input type="text" class="form_input discord-metaform-input" placeholder="Discord Link" name="dslink[]">
                <button type="button" class="my-1 add-option-button" onclick="addDiscordMetaform()">Add Discord Link</button>
            </div>
          </div>
          <label>Emails</label>
          <div id="Emails_metaform_field" style="text-align: start;">
            <div id="Emails_container">

            </div>
            <div class="Emails-input-container-metaform" >
                <input type="text" class="form_input Emails-metaform-input" placeholder="Email" name="Emails[]">
                <button type="button" class="my-1 add-option-button" onclick="addEmailMetaform()">Add Email</button>
            </div>
          </div>
          <p>QUESTIONS</p>
          <div id="questionsContainer_meta">
          
            <button style="display: block;" type="button" id="add-question"
              class="add-option-button">Add
              Question</button>
          </div>
            <div class="text-center">
              <button type="submit" id="form_submit_btn" onclick="saveForm(event)" class="submit-button">Submit</button>
            </div>
        </div>
      </form>
    </div>

    <div class="preview" id="preview-background">

    <style>
      .hide_scroll::-webkit-scrollbar {
      display: none;
    }
    .hide_scroll {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .overlay {
        display: none;
        position: fixed;
        top: 0;
        opacity: 0.4;
        background-color: rgb(0, 0, 0);
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 999;
    }
    .text_style{
        color: #FFF;
        font-family: Quicksand;
        font-size: 16px;
        font-style: normal;
        font-weight: 600;
        line-height: normal;
    }
    .heading_style{
        position: relative;
    }
    .form_input{
        border: none;
        height: 49.936px;
        width: 100%;
        flex-shrink: 0; 
        margin-bottom: 15px;
        border-radius: 4px;
        background: #ECECEC; 
        padding: 15px 0px 15px 20px; 
        box-sizing: border-box;
    }
    .btn_submit{
        width: 100%;
        margin: 15px 0px;
        height: 49.936px;
        flex-shrink: 0;
        bottom: 20px;
        color: white;
        left: 50%; 
        border: none;
        cursor: pointer;
        border-radius: 25px;
        background: linear-gradient(0deg, #002773 0%, #002773 100%), #FF6012;
    }
    select {
        height: 49.936px;
        width: 100%;
        background-color: #ECECEC;
        border-radius: 4px;
        border: none;
        padding: 0px 5px;
    }
    .close_btn{
        cursor: pointer;
        position: absolute; 
        right: 20px; 
        top:20px;
    }
    #popupform{
        box-sizing: border-box;
        padding: 66px 15px 20px 15px;
        background-color: #FFF;
        border-radius: 10px;
        max-height: 600px;
        overflow-x: auto;
    }
    @media only screen and (max-width: 700px) {
      #preview-background{
        display: none;
      }
    }
    </style>
      <div class="hide_scroll" id="popupform">
    <input class="form_input"  type="text"  placeholder="Full Name">
      <input class="form_input" type="text"  placeholder="Email address">
      <div style="display: flex; justify-content: space-between;">
        <div style="width: 15%; display: flex; justify-content: center; align-items: center; padding: 0px; font-size: 16px;" class="form_input">+65</div>
        <input style="width: 83%;" class="form_input" type="text"  placeholder="Mobile">
      </div>
      <input style="height: 70px;" class="form_input" placeholder="Message"></input>
      <!-- Example of dynamic fields -->
      <div class="preview_question_container">
      </div>

    <button class="btn_submit">Send</button>
  </div>  
      
    </div>
      <script>
        function addDiscordMetaform() {
        let inputContainer = document.getElementById('discord_container');
        let discord_container = document.createElement('div');
        discord_container.innerHTML ='<div class="discord-input-container-metaform">' +
                                '    <input type="text" class="form_input discord-metaform-input" placeholder="Discord Link" name="dslink[]">' +
                                '    <button type="button" class="my-1 p-2 rounded-2 remove-discord-input" onclick="removeDiscordmetaform(this)">Remove</button>' +
                                '</div>';
          inputContainer.insertBefore(discord_container, inputContainer.firstChild);
        }

        function removeDiscordmetaform(element) {
            let containerToRemove = element.parentNode.parentNode;
            containerToRemove.parentNode.removeChild(containerToRemove);
        }

        function addEmailMetaform() {
        let inputContainer = document.getElementById('Emails_container');
        let discord_container = document.createElement('div');
        discord_container.innerHTML ='<div class="Emails-input-container-metaform">' +
                                '    <input type="text" class="form_input Emails-metaform-input" placeholder="Email Link" name="Emails[]">' +
                                '    <button type="button" class="my-1 p-2 rounded-2 remove-Emails-input" onclick="removeEmailmetaform(this)">Remove</button>' +
                                '</div>';
          inputContainer.insertBefore(discord_container, inputContainer.firstChild);
        }

        function removeEmailmetaform(element) {
            let containerToRemove = element.parentNode.parentNode;
            containerToRemove.parentNode.removeChild(containerToRemove);
        }
      </script>
    <script>
          document.addEventListener("DOMContentLoaded", function() {
              const addQuestionButton = document.getElementById("add-question");
              const formContainer = document.getElementById("questions_container");
  
              function attachEventListeners(questionGroup) {
                const addOptionButton = questionGroup.querySelector(".add-option-button");
                const deleteQuestionButton = questionGroup.querySelector(".delete-question-button");
                
                addOptionButton.addEventListener("click", function() {
                  const optionsContainer = questionGroup.querySelector(".options-container");
                  const optionDiv = document.createElement("div");
                  optionDiv.classList.add("option");
                  optionDiv.innerHTML = `
                  <input type="text" class="options" name="option[]" placeholder="Option">
                  <button type="button" class="delete-option-button">Delete option</button>
                  `;
                  optionsContainer.appendChild(optionDiv);
                  attachDeleteOptionButton(optionDiv);
                   //########## for preview Page #########//
                   const optionsInput = document.querySelectorAll(".options");
                    optionsInput.forEach(optionInput =>{
                      optionInput.addEventListener('input',populateQuestionsOnpreview);
                    })
                  //########## for preview Page #########//
                });
            
                deleteQuestionButton.addEventListener("click", function() {
                  questionGroup.remove();
                });
              }
            
              function attachDeleteOptionButton(optionDiv) {
                const deleteOptionButton = optionDiv.querySelector(".delete-option-button");
                deleteOptionButton.addEventListener("click", function() {
                  optionDiv.remove();
                });
              }
  
  
              //##############Attaching preexistig questions the listner#################
              const existingQuestionGroups = document.querySelectorAll(".question-group");
                      existingQuestionGroups.forEach(function(questionGroup) {
                        attachEventListeners(questionGroup);
  
                  // Attach event listeners to existing options within this question group
                  const existingOptions = questionGroup.querySelectorAll(".options-container .option");
                      existingOptions.forEach(function(optionDiv) {
                        attachDeleteOptionButton(optionDiv);
                    });
                });
  
  
            
              addQuestionButton.addEventListener("click", function() {
                const data = extractQuestionsAndOptions();
                const questionGroup = document.createElement("div");
                questionGroup.classList.add("question-group");
                questionGroup.innerHTML = `
                  <input type="text" name="question[]" placeholder="Question" class="question">
                  <button type="button" class="add-option-button">Add Option</button>
                  <button type="button" class="delete-question-button">Delete Question</button>
                  <div class="options-container">
                    <div class="option">
                      <input type="text" name="option[]" placeholder="Option" class="options">
                      <button type="button" class="delete-option-button">Delete option</button>
                    </div>
                  </div>
                `;
                addQuestionButton.parentNode.insertBefore(questionGroup, addQuestionButton);
                attachEventListeners(questionGroup);
                const optionDiv = questionGroup.querySelector(".options-container .option");
                attachDeleteOptionButton(optionDiv);
                  
  
  
                //##############For preview Page ############
                const questionInputs = document.querySelectorAll(".question");
                  questionInputs.forEach(questionInput => {
                    questionInput.addEventListener('input',populateQuestionsOnpreview)
                  })
  
                  const optionsInput = document.querySelectorAll(".options");
                    optionsInput.forEach(optionInput =>{
                      optionInput.addEventListener('input',populateQuestionsOnpreview);
                    })
                  //##############For preview Page ############
            });
    });
  
    function extractQuestionsAndOptions(params) {
      const questionInputs = document.querySelectorAll(".question");
      const answers = [];
  
      questionInputs.forEach(questionInput => {
        let optionsContainer = questionInput;
        for (let i = 0; i < 3; i++) {
          optionsContainer = optionsContainer.nextElementSibling;
        }
        const questionText = questionInput.value;
        const optionsInputs = optionsContainer.querySelectorAll('.option input');
        const options = [];
        optionsInputs.forEach(optionInput => {
          options.push(optionInput.value);
        });
        answers.push({ question: questionText, options: options });
      });
      return answers;
    }

    const questionInputs = document.querySelectorAll(".question");
    questionInputs.forEach(questionInput => {
      questionInput.addEventListener('input',populateQuestionsOnpreview)
    })
    const optionsInput = document.querySelectorAll(".options");
    optionsInput.forEach(optionInput =>{
      optionInput.addEventListener('input',populateQuestionsOnpreview);
    })

    
      const form = document.querySelector("#dynamic-form");
      const inputsAndTextareas = form.querySelectorAll("input, textarea");

      inputsAndTextareas.forEach((element) => {
        element.addEventListener("input", function(event) {
          populateQuestionsOnpreview();
        });
      });
      function populateQuestionsOnpreview() {
            const preview_question_container = document.querySelector('.preview_question_container');
            const question_div = document.createElement('div');
            const arr = extractQuestionsAndOptions()
            preview_question_container.innerHTML = "";
            
            for (let i = 0; i < arr.length; i++) {
                let optionsHTML = '';
                if(arr[i].options.length == 0){
                    question_div.innerHTML += `
                    <p style="margin-bottom: 3px; color: black">${arr[i].question}</p>
                    <input class="form_input" placeholder="Type here..."></input>
                    `
                }else{
                    for (let j = 0; j < arr[i].options.length; j++) {
                    optionsHTML += `
                        <option value=${arr[i].options[j]}>${arr[i].options[j]}</option>
                        `;
                    }
                    question_div.innerHTML += `
                    <p style="margin-bottom: 3px; color: black">${arr[i].question}</p>
                    <select>
                    ${optionsHTML}  
                    </select>
                    `
                }
                preview_question_container.appendChild(question_div);
            }
        }

      

      function validate() {
        const answers = extractQuestionsAndOptions();
            //#################Validation function#######################
          for (let index = 0; index < answers.length; index++) {
            if (answers[index].question == '') {
              alert("Please fill all the fields");
              return false;
            }
            const options = answers[index].options;
            for (let j = 0; j < options.length; j++) {
              if(options[j] == ''){
                alert("Please fill all the fields.");
                return false;
              }
            }
          }
          // if(document.getElementById("form_name").value == ''){
          //   alert("Please fill all the fields.");
          //   return false;
          // }
          return true;
      }



      async function saveForm() {
        event.preventDefault();
        if(!validate()){
          return;
        }
        const {discordLinkValues, emailLinkValues} = extractDiscordAndMails();  
        // const name = document.getElementById("form_name").value;
        const questions = extractQuestionsAndOptions();
        const profileId = document.getElementById("profile_id").getAttribute("profile_id");
        const res = await fetch(`/api/addform/${profileId}`, {
          method: "POST",
          body: JSON.stringify({
            questions: questions,
            discord: discordLinkValues,
            profileId: profileId,
            emails:emailLinkValues

          }),
          headers: {
            "Content-type": "application/json; charset=UTF-8"
          }
        })
        const resData = await res.json();
        if(res.status == 200){
          Swal.fire({
            title: "Form Created Successfully",
            icon: "success",
            confirmButtonText: "Ok",
          })    
          document.getElementById("form_popup").classList.remove("open_popup");
          document.getElementById("form_popup").classList.add("close_popup");
          const overlay = document.getElementById("overlay");
          overlay.style.display = "none";
        }else{
          alert(resData.message);
          return;
        }
        
      }


      async function fetchProfileDetail (id){
          const res = await fetch(`/api/profile/fetch/${id}`,{
              method:"GET"
          })
          const data = await res.json();
          return data;
      }



 
      function extractDiscordAndMails(params) {
          let discordLinks = document.querySelectorAll('input[name="dslink[]"]');
          let emailsLinks = document.querySelectorAll('input[name="Emails[]"]');


          let discordLinkValues = [];
          let emailLinkValues = [];

          for (var i = 0; i < discordLinks.length; i++) {
            discordLinkValues.push(discordLinks[i].value);
          }
          for (var i = 0; i < emailsLinks.length; i++) {
            emailLinkValues.push(emailsLinks[i].value);
          }
          return {discordLinkValues, emailLinkValues};
      }
      
      </script>
      </div>
</div>