<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport"
            content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="apple-touch-icon" sizes="76x76"
            href="/assets/img/apple-icon.png">
        <link rel="stylesheet" href="/css/loading.css">
        <link rel="icon" type="image/png" href="/logo.png">
        <title>
            Jome Journey
        </title>
        <!--     Fonts and icons     -->
        <link rel="stylesheet" type="text/css"
            href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900|Roboto+Slab:400,700" />
        <!-- Nucleo Icons -->
        <link href="/assets/css/nucleo-icons.css" rel="stylesheet" />
        <link href="/assets/css/nucleo-svg.css" rel="stylesheet" />
        <!-- Font Awesome Icons -->
        <script src="https://kit.fontawesome.com/658a2960da.js"
            crossorigin="anonymous"></script> <!-- Material Icons -->
        <link
            href="https://fonts.googleapis.com/icon?family=Material+Icons+Round"
            rel="stylesheet">
        <!-- CSS Files -->
        <link id="pagestyle" href="/assets/css/material-dashboard.css?v=3.1.0"
            rel="stylesheet" />
        <script defer data-site="YOUR_DOMAIN_HERE"
            src="https://api.nepcha.com/js/nepcha-analytics.js"></script>
        <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});let f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-K3SG3FFJ');  
        </script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
         <!-- Sweet alert -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    </head>
    <style>
/* checkbox Style  */
        .container_checkbox {
            display: block;
            position: relative;
            padding-left: 35px;
            margin-bottom: 12px;
            cursor: pointer;
            font-size: 22px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            font-size: 14px;
        }
        .container_checkbox input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }

        .checkmark_discord {
            position: absolute;
            top: 0;
            left: 0;
            height: 25px;
            width: 25px;
            background-color: #eee;
            border-radius: 10px;
        }
        .container_checkbox:hover input ~ .checkmark_discord {
            background-color: #ccc;
        }

        /* When the checkbox is checked, add a blue background */
        .container_checkbox input:checked ~ .checkmark_discord {
            background-color: #2196F3;
        }

        /* Create the checkmark/indicator (hidden when not checked) */
        .checkmark_discord:after {
            content: "";
            position: absolute;
            display: none;
        }

        .container_checkbox input:checked ~ .checkmark_discord:after {
        display: block;
        }

        /* Style the checkmark/indicator */
        .container_checkbox .checkmark_discord:after {
            left: 9px;
            top: 5px;
            width: 5px;
            height: 10px;
            border: solid white;
            border-width: 0 3px 3px 0;
            -webkit-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            transform: rotate(45deg);
        }

        .small_icon{
                    display: none;
                }
        @media (max-width: 927px) {
            .main_container{
                flex-wrap: wrap;
            }
            .clients_div{
                width: 100% !important;
            }
            #show_profiles_div{
                width: 100% !important;
                margin-top: 15px;
            }
            #thankyoupagepopup{
                width: 90% !important;
                margin: auto;
                height: fit-content !important;
                padding: 0px !important;
            }
            #meta_form_popup_inner{
                width: 90% !important;
                margin: auto;
            }
            .form-container{
                width: 90% !important;
                margin: auto;
            }
            #Insurance_form{
                width: 90% !important;
                margin: auto;
            }
            #Add_hbd_popup{
                width: 90% !important;
                margin: auto;
            }
            .clientedit-popup,.clientadd-popup, .profileadd_popup{
                width: 90% !important;
                margin: auto;
            }
            .big_icon{
                display: none;
            }
            .small_icon{
                display: inline;
                margin: 6px !important;
            }
            .options_div{
                width: 190px!important;
            }
        }
        

        #inputField {
            display: none;
        }
        #close_popup_btn {
            position: absolute;
            right: 8px;
            top: 13px;
            border-radius: 58%;
            padding: 2px 7px;
            width: 26px;
            /* border: 1px solid; */
            height: 25px;
            }
        #close_popup_btn:hover{
            cursor: pointer;
        }
      
      
        .question-group {
          margin-bottom: 20px;
          padding: 15px;
          background-color: #dad7d7;
          border-radius: 5px;
          width: fit-content;
          margin-top: 5px;
        }
        .question-group button{
          margin-top: 5px;
        }
      
        .options-container {
          margin-top: 10px;
        }
      
        .option {
          display: flex;
          align-items: center;
          margin-bottom: 10px;
          flex-wrap: wrap;
        }
      
        .option input {
          margin-right: 10px;
        }
      
        .add-option-button,
        .delete-question-button,
        .delete-option-button {
         background-color: #002655;
          /* background-color: #E64C71; */
          border: none;
          color: #fff;
          padding: 10px 20px;
          border-radius: 5px;
          cursor: pointer;
          font-size: 16px;
          transition: background-color 0.3s;
        }
      
        .add-option-button:hover,
        .delete-question-button:hover,
        .delete-option-button:hover {
          background-color: #E64C71;
        } 
        .submit-button {
          background-color: #2ecc71;
          color: #fff;
          padding: 10px 20px;
          border: none;
          border-radius: 5px;
          font-size: 16px;
          cursor: pointer;
          transition: background-color 0.3s;
          margin-bottom: 10px;
        }
        textarea{
          padding: 5px;
        }
        .submit-button:hover {
          background-color: #27ae60;
        }
        #discord_edit_client,.clientedit-popup,.clientadd-popup, .profileadd_popup, .form_edit_popup{
            background-color:white;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            box-shadow: 0px 2px 10px 1px rgba(0,0,0,0.45);
            width: 400px;
            border-radius: 5px;
            padding: 20px;
        }
        .clientadd-popup input{
            border: 1px solid #ced4da;
            border-radius: 5px;
            padding: 5px;
            margin-bottom: 5px;
        }
        .close_popup{
            display: none;
        }
        .open_popup{
            display: block;
        }
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            opacity: 0.4;
            background-color: rgb(0, 0, 0);
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 999;
        }
        button{
            border: none;
            background-color: #002655 !important;
            color: white !important;
        }
        .overlay_loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black overlay */
            display: none; /* Initially hidden */
            z-index: 99999; /* Ensures it's on top of other content */
        }
        .loader {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #3498db;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10000; /* Ensure the loader is above the overlay */
        }
        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }
        .menu_icon_div{
            width: 30px;
            height: 30px;
            text-align: center;
            border-radius: 50%;
        }
        .menu_icon_div:hover{
            cursor: pointer;
        }
        .menu_popup li {
            padding: 5px 18px;
            list-style: none;
            font-size: 16px;
            border-radius: 3px;
        }
        .menu_popup li:hover{
            cursor: pointer;
            background-image:linear-gradient(195deg, #028090 0%, #00BFB2 100%);
            color: white;
        }
        li:hover > a{
            color: white;
        }
        li a{
            text-decoration: none;
            color: black;
        }
        .menu_popup{
            background-color:white;
            position: fixed; 
            top: 50%; 
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000; 
            box-shadow: 0px 2px 10px 1px rgba(0,0,0,0.45);
            width: 300px;
            border-radius: 5px;
            padding: 10px;
            /* text-align: center; */
        }
        .clients_div{
            border-radius: 10px;
            background: #F1F2F5;
            box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
        }
      
        .selected_client{
            background-color: #56575B;
            color: white;
        }
        .unselected_client{
            background-color: white;
            color: black;
        }
        #search_client:focus{
            outline:none;
        }

        .clients_div li{
            min-width: 100%;
            width: max-content;
            list-style: none;
            height: 50px;
            border-radius: 6px;
            display: flex;
            justify-content: start;
            padding-left: 10px;
            align-items: center;
            margin-top: 15px;
            font-weight: 400;
            box-shadow: 0px 4px 11px -7px rgba(0,0,0,0.37)

        }
        .center_span{
            display: flex;
            justify-content: center;
            align-items: center;
        }
        li:hover{
            cursor: pointer;
        }
        .forms_div{
            border-radius: 6px; height: 60px; background-color: #F1F2F5;
        }
        #meta_form_popup > div ::-webkit-scrollbar {
             display: none;
        }
         #meta_form_popup ::-webkit-scrollbar {
             display: none;
        }
        #thankyoupagepopup ::-webkit-scrollbar {
             display: none;
        }

        #client_edit:hover{
            cursor: pointer;
            background-color: #bdbdbd;
        }
        #client_del:hover{
            cursor: pointer;
        }
    </style>
    <div class="overlay" id="overlay"></div>
    <div class="overlay_loading">
        <div class="loader"></div>
    </div>

    <%- include('../gallery.ejs') %>
    
    <body style="height: 100vh;" class="g-sidenav-show bg-gray-200">
        <noscript><iframe
                src="https://www.googletagmanager.com/ns.html?id=GTM-K3SG3FFJ"
                height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>

        <!--################ Client Add Popup ######## -->
        <div class="clientadd-popup close_popup">
            <span onclick="closeAllPopups()" id="close_popup_btn"><i class="fa-solid fa-x"></i></span>
            <h5 class="text-center">Add Client</h5>
            <div class="form-group">
                <input type="text" class="form-control  border p-1 mt-1 border-1" id="nameInput" placeholder="Enter Client Name">
            </div>
            <div class="form-group">
                <input type="text" class="form-control  border p-1 mt-1 border-1" id="emailInput" placeholder="Enter Client Email">
            </div>
            <div class="form-group">
                <input type="password" class="form-control  border p-1 mt-1 border-1" id="passInput" placeholder="Password">
            </div>
            <div class="form-group">
                <input type="password" class="form-control  border p-1 mt-1 border-1" id="confirmPassInput" placeholder="Confirm Password">
            </div>
            <div class="d-flex mt-3">
                <button class="btn mx-auto" onclick="addclientHandler()">Add</button>
            </div>
        </div>           
        

        <!--############### Project Add Popup ######### -->
        <div class="profileadd_popup close_popup"
            style="text-align: center;">
            <span onclick="closeAllPopups()" id="close_popup_btn" ><i class="fa-solid fa-x"></i></span>
            <h3 class="text-center">Add Profile</h3>
            <div class="form-group">
                <input type="text" class="form-control border p-1 mt-1 border-1" id="profile_name"
                    placeholder="Enter Profile Name">
            </div>
            <div class="mt-5">
                <button onclick="createProfile()"
                    style="background-color: #002655; color:white"
                    class="btn btn-xl w-25">Add</button>
            </div>
        </div>



        <!--########## Client Edit Popup ############### -->
        <div class="clientedit-popup close_popup">
            <span onclick="closeAllPopups()" id="close_popup_btn" ><i class="fa-solid fa-x"></i></span>
            <h5 class="text-center">Edit Client</h5>
            <div class="form-group">
                <input type="text" class="form-control border p-1 mt-1 border-1" id="client_name_edit"
                    placeholder="Enter Name">
            </div>
            <div class="form-group">
                <input type="email" class="form-control border p-1 mt-1 border-1" id="client_email_edit"
                    placeholder="Enter Email">
            </div>
            <div class="form-group">
                <input type="text" class="form-control border p-1 mt-1 border-1" id="client_password_edit"
                    placeholder="Enter Password">
            </div>
            <div class="d-flex mt-3">
                <button id="client_edit_post_btn" class="btn mx-auto" onclick="editclientPost()">Save</button>
                <a  id="client_del" clientid="" onclick="deleteClient(this)" class="btn btn-danger me-auto" >
                    Delete
                    </a>
            </div>
        </div>



        <!--########## Add Form Popup ############### -->
        <%- include('../form/landingPageEdit.ejs') %>
        <aside style="background-color: #0E4884 !important; z-index: 10;"
            class="sidenav navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-3"
            id="sidenav-main">
            <div class="sidenav-header">
                <i
                    class="fas fa-times p-3 cursor-pointer text-white opacity-5 position-absolute end-0 top-0 d-none d-xl-none"
                    aria-hidden="true" id="iconSidenav"></i>
                <a class="navbar-brand m-0"
                    href="/"
                    >
                    <img src="/logo.png" class="navbar-brand-img h-100"
                        alt="main_logo">
                    <span class="ms-1 font-weight-bold text-white">Jome Journey</span>
                </a>
            </div>
            <hr class="horizontal light mt-0 mb-2">
            <div class="collapse navbar-collapse  w-auto "
                id="sidenav-collapse-main">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link text-white " href="/">
                            <div
                                class="text-white text-center me-2 d-flex align-items-center justify-content-center">
                                <i class="material-icons opacity-10">dashboard</i>
                            </div>
                            <span class="nav-link-text ms-1">Dashboard</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a
                            class="nav-link text-white active"
                            style="background-color: #002655;"
                            href="/clients">
                            <div
                                class="text-white text-center me-2 d-flex align-items-center justify-content-center">
                                    <i class="fa-solid fa-users"  style="color: #ffffff;"></i>
                            </div>
                            <span class="nav-link-text ms-1">Clients</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/leads">
                            <div
                                class="text-white text-center me-2 d-flex align-items-center justify-content-center">
                                <i class="fa-solid fa-database"></i>
                            </div>
                            <span class="nav-link-text ms-1">Leads</span>
                        </a>
                    </li>
                    
                    

                    <li class="nav-item">
                        <a class="nav-link text-white "
                            href="/logout">
                            <div
                                class="text-white text-center me-2 d-flex align-items-center justify-content-center">
                                <i class="material-icons opacity-10">logout</i>
                            </div>
                            <span class="nav-link-text ms-1">Log Out</span>
                        </a>
                    </li>
                </ul>
            </div>
        </aside>
        <main
            class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
            <nav
                class="ms-auto navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl"
                id="navbarBlur" data-scroll="true">
                <div class="container-fluid py-1 px-3">
                    <li
                        class="ms-auto nav-item d-xl-none ps-3 d-flex align-items-center">
                        <a href="javascript:;" class="nav-link text-body p-0"
                            id="iconNavbarSidenav">
                            <div class="sidenav-toggler-inner">
                                <i class="sidenav-toggler-line"></i>
                                <i class="sidenav-toggler-line"></i>
                                <i class="sidenav-toggler-line"></i>
                            </div>
                        </a>
                    </li>
                </div>
            </nav>
            <div class="container-fluid py-4">
                <div class="row">
                    <div class="col-12">
                        <div class="card my-4">
                            <div
                                class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                                <div style="background-color: #002655;"
                                    class="d-flex shadow-primary border-radius-lg pt-4 pb-3">
                                    <%if(currentUser.role == "admin"){%>
                                        <h6 class="text-white text-capitalize ps-3">Clients</h6>
                                        <button
                                            style="background-color: #3E3E45 !important; height: 44px;"
                                            id="btn_addclient_popup"
                                            class="d-flex btn ms-auto me-3"><h6
                                                class="text-white text-capitalize">Add
                                                Client</h6></button>
                                    <%}else{%>
                                        <h6 class="text-white text-capitalize ps-3"><%=currentUser.email%></h6>
                                    <%}%>
                                </div>
                            </div>

                            <div
                                class="main_container p-3 d-flex w-100 h-100 mt-3">
                                <%if(currentUser.role == "admin"){%>
                                        <div
                                            class="p-3 text-center clients_div w-25 height-500 border border-2 overflow-auto">
                                            <div>
                                                <div
                                                    class="d-flex w-100 border border-0 rounded-2 p-2"
                                                    style="background-color: white; box-shadow: 0px 4px 11px -7px rgba(0,0,0,0.37)">
                                                    <input id="search_client"
                                                        style="width: 100%; border: none;"
                                                        placeholder="Search Client"
                                                        type="text">
                                                    <span class="center_span"><i
                                                            class="fa-solid fa-magnifying-glass fa-xl"></i></span>
                                                </div>
                                            </div>

                                            <div class="clientsname_div">
                                                <%for(let i = 0; i < clients.length;
                                                i++){%>
                                                <li style="width: 150px;"
                                                    class="nav-link-text unselected_client border-0"
                                                    mid="<%=clients[i].id%>"
                                                    value="<%=clients[i].name%>"
                                                    onclick="clientListener(this)"><span
                                                        style=" display: flex; margin-right: 15px; border-radius: 50%; padding: 3px; background-color: #56575B;"><i
                                                            class="fa-solid fa-list"
                                                            style="color: #ffffff;"></i></span>
                                                            <%if(clients[i].name.length > 18){%>
                                                                <%=clients[i].name.substring(0, 14) + '...' %>
                                                                <%}else{%>
                                                                    <%=clients[i].name%>
                                                                <%}%>
                                                            
                                                    <span clientid="<%=clients[i].id%>" id="client_edit" onclick="client_edit_popup(this)" class=" ms-auto me-2 rounded-circle d-flex p-1"><i class="fa fa-gear"></i></i></i></i></span> </li>
                                                <%}%>
                                            </div>
                                        </div>
                                <%}%>
                                <div id="show_profiles_div" style="height: 100vh; color: black;"
                                    class="d-none w-75 h-500 ps-3">
                                <%- include('../editprofile.ejs') %>
                                <div id="show_profiles"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <!--   Core JS Files   -->
        <script src="/assets/js/core/popper.min.js"></script>
        <script src="/assets/js/core/bootstrap.min.js"></script>
        <script src="/assets/js/plugins/perfect-scrollbar.min.js"></script>
        <script src="/assets/js/plugins/smooth-scrollbar.min.js"></script>
        <script>
            let win = navigator.platform.indexOf('Win') > -1;
            if (win && document.querySelector('#sidenav-scrollbar')) {
            let options = {
                damping: '0.5'
            }
            Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
            }
        </script>
        <!-- Github buttons -->
        <script async defer src="https://buttons.github.io/buttons.js"></script>
        <script src="/assets/js/material-dashboard.min.js?v=3.1.0"></script>
        <script>
            function generateRandomHexString(length) {
                const arr = new Uint8Array(length / 2);
                window.crypto.getRandomValues(arr);
                return Array.from(arr, byte => byte.toString(16).padStart(2, '0')).join('');
            }

            function generateLongStringWithDelimiter(id) {
                // Create a random string
                const randomString = generateRandomHexString(16);

                // Combine the ID with the random string, separated by a delimiter
                // Use a delimiter that won't appear in the ID or random string
                const delimiter = "--"; // Make sure this doesn't conflict with ID or random string characters
                const combinedString = id + delimiter + randomString;

                // Return the Base64 encoded result
                return btoa(combinedString);
            }
    
            
        
            const defaltLinks = {
                temp1:[
                        { type: 'heading', link: null, name: null, heading: 'My active listings', sort_order: 1 },
                        { type: 'link', link: 'https://www.propertyguru.com.sg/', name: 'Property Guru', heading: null, sort_order: 2 },
                        { type: 'link', link: 'https://www.99.co/singapore', name: '99.co', heading: null, sort_order: 3 },
                        { type: 'link', link: '#', name: 'Edge Property', heading: null, sort_order: 4 },
                        { type: 'link', link: '#', name: 'SRX', heading: null, sort_order: 5 },
                        { type: 'heading', link: null, name: null, heading: 'Digital Profile', sort_order: 6 },
                        { type: 'link', link: '#', name: 'About', heading: null, sort_order: 7 },
                        { type: 'link', link: '#', name: 'My Personal site', heading: null, sort_order: 8 },
                        { type: 'link', link: '#', name: 'My Awards', heading: null, sort_order: 9 },
                    ]
            }
            
            async function closeEditDiv(){
                document.querySelector(".profile_edit_container").style.display = "none"
                const elem = document.getElementsByClassName("selected_client")[0];
                document.getElementById('step1').style.display = 'block';
                document.getElementById('step2').style.display = 'none';
                populateFormsBasedonCLient(elem);
            }
            
            function showLoadingOverlay() {
                const overlay = document.querySelector('.overlay_loading');
                overlay.style.display = 'block';
            }

            function hideLoadingOverlay() {
                const overlay = document.querySelector('.overlay_loading');
                overlay.style.display = 'none';
            }
            </script>
        <%if(currentUser.role == "admin"){%>
        <script>
            onStart()
            //######## Saving client selected state in local storage ##########
            function onStart(params) {
               
                if(localStorage.getItem("selected_client")){
                    const selected_client = localStorage.getItem("selected_client");
                    const client = document.querySelector(`[mid="${selected_client}"]`);
                    if(client){
                        client.classList.add('selected_client');
                        client.classList.remove("unselected_client");
                        populateFormsBasedonCLient(client);
                    }
                }else{
                    const client = document.querySelector('.clientsname_div li');
                    if(client){
                        client.classList.add('selected_client');
                        client.classList.remove("unselected_client");
                        populateFormsBasedonCLient(client);
                    }

                }
                openLastCreatedProfile();
            }

            const overlay = document.getElementById("overlay");

            overlay.addEventListener("click", () => {
                closeAllPopups();
                overlay.style.display = "none";
            });

            function closeAllPopups() {
                document.getElementsByClassName("questionContainer").innerHTML = "";
                let openPopups = document.querySelectorAll('.open_popup');
                openPopups.forEach(function(element) {
                    element.classList.remove('open_popup');
                    element.classList.add('close_popup');
                }); 
                overlay.style.display = "none";
               
            }

            function openpopup(event) {
                closeAllPopups(); 
                const menuDiv = document.getElementsByClassName('clientadd-popup');
                menuDiv[0].classList.add("open_popup");
                overlay.style.display = "block";
            }

            function openpopupaddproject(event) {
                // closeAllPopups();
                const menuDiv = document.getElementsByClassName('profileadd_popup');
                menuDiv[0].classList.add("open_popup");
                overlay.style.display = "block";
                clearForm();
                const clientid = document.querySelector('.selected_client').getAttribute('mid');
            }

            function clearForm() {
                const formElements = document.querySelectorAll('input, textarea');

                formElements.forEach(element => {
                    element.value = '';
                });
                }

            document.getElementById("btn_addclient_popup").addEventListener("click", ()=>{
                openpopup();
            })

            async function addclientHandler() {
                const name = document.getElementById("nameInput").value;
                const email = document.getElementById("emailInput").value;
                const pass = document.getElementById("passInput").value;
                const confirmPass = document.getElementById("confirmPassInput").value;
                

                if (!name) {
                    swal.fire({
                        title: "Missing Fields",
                        text: "",
                        icon: "question",
                        confirmButtonText: "Ok",
                        confirmButtonColor: "#002655",
                    });
                    return;
                }

                showLoadingOverlay();
                try {
                    const res = await fetch('/api/client/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: name,
                            email: email,
                            password: pass,

                        })
                    })
                    const resData = await res.json();
                    hideLoadingOverlay();
                    if(res.status == 200){
                        localStorage.setItem("selected_client", resData.id);
                        swal.fire({
                            title: "Success",
                            text: resData.message,
                            icon: "success",
                            confirmButtonText: "Ok",
                            confirmButtonColor: "#002655",
                        }).then(()=>{
                            window.location.reload();
                        })
                    }else{
                        swal.fire({
                            title: "Error",
                            text: resData.message,
                            icon: "error",
                            confirmButtonText: "Ok",
                            confirmButtonColor: "#002655",
                        });
                        return;
                    }
                } catch (error) {
                    alert(error.message);
                }
            }

            function open_popup_option(event) {
                closeAllPopups(); 
                const menuIconDiv = event.target.closest('.menu_icon_div');
                if (!menuIconDiv) return;
                const menu_popup = menuIconDiv.nextElementSibling;
                if(menu_popup && menu_popup.classList.contains('close_popup')) {
                    menu_popup.classList.remove("close_popup");
                    menu_popup.classList.add("open_popup");
                }
                overlay.style.display = "block";
            }

            async function createProfile (){
               overlay.style.display = "block";
               const name = document.getElementById("profile_name").value;

               if(name.length <= 4){
                swal.fire({
                    title: "Error",
                    text: "Please Enter Atleast 3 Letters",
                    icon: "question",
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#002655",
                });
                return;
               }
                
               const clientID = document.getElementsByClassName("selected_client")[0].getAttribute("mid");
               showLoadingOverlay();
               try {
                const res = await fetch('/addprofile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: name,
                            clientID:clientID
                        })
                    })
                    const resData = await res.json();
                    if(res.status == 200){
                        localStorage.setItem('lastCreatedProfileID', resData.id);
                        window.location.reload();
                    }else{
                        hideLoadingOverlay(); 
                        swal.fire({
                            title: "Error",
                            text: resData.message,
                            icon: "error",
                            confirmButtonText: "Ok",
                            confirmButtonColor: "#002655",
                        });
                        return;
                    }
                } catch (error) {
                       alert(error.message);
                }
            }

            function clearclientSelected (curr_elem){
              document.querySelectorAll('.clientsname_div li').forEach((element)=>{
                element.classList.remove('selected_client');
                element.classList.add('unselected_client');
              })
              curr_elem.classList.remove("unselected_client");
                  curr_elem.classList.add("selected_client");
            }

            async function populateFormsBasedonCLient(curr_elem){
                document.getElementById("show_profiles_div").classList.remove("d-none");
                const clientid = curr_elem.getAttribute("mid");
                const {client, profiles} = await fetchClientDetails(clientid);
                document.querySelector(".profile_edit_container").style.display = "none";
                const showformdiv = document.getElementById("show_profiles");
                showformdiv.innerHTML = "";
                showformdiv.innerHTML = `
                <div>
                    <button style="border-radius: 30px; background-color: #002655; color: white;" onclick="openpopupaddproject()" class="btn btn-lg">Add New Profile</button>
                </div>`

                if (!profiles || profiles.length == 0) {
                showformdiv.innerHTML = `
                <div>
                    <button style="border-radius: 30px; background-color: #002655; color: white;" onclick="openpopupaddproject()" class="btn btn-lg">Add New Profile</button>
                </div>
                <h4 class="text-center" > No profiles </h4>
                `
                }else{

                    profiles.forEach(profile=>{
                        const uniqueID = generateLongStringWithDelimiter(profile.id);
                        showformdiv.innerHTML += `            
                    <div class="d-flex mt-3 forms_div">
                        <div topic="project" profile_id="${profile.id}" contenteditable="true" style="outline: 0px solid transparent; align-items: center; width: 300px; height: 100%;" class="editable_div d-flex ps-4">${profile.name}</div> 
                        
                        <div class="options_div ms-auto" > 
                            
    
                            <a target="_blank" href="/profile/${uniqueID}" class="big_icon btn btn-sm btn-facebook mt-3 me-2" >
                                View
                            </a>
    
                            <a target="_blank"  href="/profile/${uniqueID}" class="small_icon mt-3 ms-4">
                                <i class="fa-solid fa-eye"></i>
                            </a>
                            
                            
                            
                            <a href="/api/delete/profile/${profile.id}" class="big_icon mt-3 btn-sm btn btn-danger me-2" >
                            Delete
                            </a>
    
                            <a href="/api/delete/profile/${profile.id}" class="small_icon mt-3 ms-4">
                                <i class="fa-solid fa-trash"></i>
                            </a>
    
                            
                            
    
                            <button style="background-color:#002655" onclick="editHandler(this)" profile_id="${profile.id}"  class="big_icon btn btn-sm btn-facebook mt-3 me-2">
                                Edit
                            </button>
    
                            <button style="background-color:transparent !important" onclick="editHandler(this)" profile_id="${profile.id}"  class="small_icon mt-3 ms-4 me-3">
                                <i class="fa-solid fa-pen-to-square" style="color: #213454;"></i> 
                            </button>
                        </div>
                    </div> `
    
                    })
                }
                editableDivHandler();
            }
            
            function clientListener (curr_elem){
                localStorage.setItem("selected_client", curr_elem.getAttribute("mid"));
               document.querySelector(".overlay_loading").style.display = "block"
                clearclientSelected(curr_elem);
                populateFormsBasedonCLient(curr_elem);
               document.querySelector(".overlay_loading").style.display = "none"


            }

            async function fetchClientDetails(clientid){
                const res = await fetch(`/api/getClient/${clientid}`,{
                    method:"GET"
                })
                const data = await res.json();
                return data;
            }

            const searchInput = document.getElementById('search_client');
            searchInput.addEventListener('input', function() {
            const searchValue = searchInput.value.toLowerCase();

            // Get the list of client names in the <li> elements
            const clientItems = document.querySelectorAll('.clientsname_div li');

            // Loop through the list items and hide those that don't match the search query
            clientItems.forEach(function(item) {
                // If the client name includes the search value, show the item; otherwise, hide it
                if (item.textContent.toLowerCase().includes(searchValue)) {
                item.style.display = ''; // or 'block' or 'flex' depending on your layout
                } else {
                item.style.display = 'none';
                }
            });
            })

            async function fetchProfileDetail (id){
                const res = await fetch(`/api/getprofile/${id}`,{
                    method:"GET"
                })
                const data = await res.json();
                return data;
            }

            function editableDivHandler(){
                    const divs = document.querySelectorAll(".editable_div");
                    divs.forEach(div=>{
                        div.addEventListener("blur", async ()=>{
                          const name = div.textContent; 
                          const id = div.getAttribute("profile_id");
                          const res = await fetch(`api/edit/profilename/${id}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({name}),
                          })
                          const data = await res.json();
                          if (res.status !== 200) {
                            alert("Something wrong with name change");
                            return;
                          }

                        })
                    })
                }


            function populateEditFormSection(forms) {
                const forms_edit_container = document.getElementById("forms_edit_container");
                forms_edit_container.innerHTML = "";
                if(forms && forms.length > 0){
                    forms.forEach(form=>{
                        forms_edit_container.innerHTML +=
                        `
                        <div class="fixed_link">
                            <p>${form.name}</p>
                                <div style="
                                display: flex;
                            ">
                            <button form_id="${form.id}" onclick="edit_Form_show(this)" style="
                                border-radius: 10px;
                                width: 40%;
                                margin: auto;
                                height: 30px;
                            ">Edit</button>
                                <button form_id="${form.id}" onclick="formDeleteHandler(this)" style="
                                border-radius: 10px;
                                width: 40%;
                                height: 30px;
                                margin: auto;
                            ">Delete</button>
                                </div>
                        </div>`
                        
                    })
                }else{
                    forms_edit_container.innerHTML = `<h4 class="text-center">No Forms</h4>`
                }
            }

            async function editHandler(curr_elem){
                const id = curr_elem.getAttribute("profile_id");
                const {profile, links, forms} = await fetchProfileDetail(id);
                document.querySelector(".profile_edit_container").style.display = "block";
                const showformdiv = document.getElementById("show_profiles").innerHTML = "";
                

                // ########### Filling all the prexisting details to the edit page ###########
                const templates = document.querySelectorAll(".image-container");
                templates.forEach(template=>{
                    if(template.getAttribute("template_id") == profile.template_selected){
                        template.classList.add("selected");
                    }else{
                        template.classList.remove("selected");
                    }
                })
                document.getElementById("profile_id").setAttribute("profile_id",id);
                document.querySelector(".agent-name").innerHTML = profile.name;
                document.getElementById("temp2_name").innerText = profile.name;
                document.getElementById("temp3_name").innerText = profile.name;
                const preview_profile_img = document.getElementsByClassName("preview_profile_img");
                    for (let i = 0; i < preview_profile_img.length; i++) {
                        preview_profile_img[i].src = profile.profile_img_path;
                    }

                
                profileDataState.templateSelected = profile.template_selected;
                document.getElementById("phone").value = profile.phone;
                document.getElementById("fb_link").value = profile.fb_link;
                document.getElementById("insta_link").value = profile.insta_link;
                document.getElementById("linkedin_link").value = profile.linkedin_link;


                //########### Populate radio of About us #############
                populateradioOfAboutUs();
                function populateradioOfAboutUs() {
                    const radioInputs = document.getElementsByName("about_us_radio");
                    const about_us = profile.about_us;
                    if(about_us && about_us.type == "text"){
                        radioInputs[0].checked = true;
                        document.getElementById('about_us_text').value = about_us.text;
                        document.getElementById("about_us_data").style.display = "none";
                        document.getElementById("about_us_text").style.display = "block";
                    }else if(about_us && about_us.type == "page"){
                        radioInputs[1].checked = true;
                        document.getElementById('about_us_text').value = "";
                        document.getElementById('title_aboutus').value = about_us.Title
                        document.getElementById('heading_aboutus').value = about_us.Heading
                        document.getElementById('desc_aboutus').value  = about_us.Description
                        document.getElementById("about_us_data").style.display = "block";
                        document.getElementById("about_us_text").style.display = "none";
                    }
                }




                //Populating the Edit Form dropdown
                populateEditFormSection(forms);

                function populateLinksAndPreview(links) {
                    const linkContainer = document.getElementById("link_container_dynamic");
                    linkContainer.innerHTML = "";
                    links.forEach(link=>{
                        if (link.type == "link") {
                            const linkCounter = linkContainer.children.length + 1;
                            const linkDiv = document.createElement('div');
                            linkDiv.classList.add('link');

                            // Flex container for horizontal radio buttons
                            const radioContainer = document.createElement('div');
                            radioContainer.classList.add('radio-container');

                            // Radio buttons for choosing between "Enter Link" and "Choose Form"
                            const enterLinkRadio = createRadio(`enterLink`, linkCounter, 'Enter Link', true);
                            const chooseFormRadio = createRadio(`chooseForm`, linkCounter, 'Choose Form', false);

                            // Dropdown for selecting predefined forms
                            const selectFormDropdown = document.createElement('select');
                            selectFormDropdown.style.display = "none"; // Initially disabled
                            // Add options to the dropdown (replace with your own options)
                            selectFormDropdown.classList.add("form_select")
                            forms.forEach(form=>{
                                if(form.id == link.link){
                                    selectFormDropdown.innerHTML += `<option selected value="${form.id}">${form.name}</option>`
                                }else{
                                    selectFormDropdown.innerHTML += `<option value="${form.id}">${form.name}</option>`
                                }
                            })
                            selectFormDropdown.style.borderRadius = "30px"
                            selectFormDropdown.style.marginBottom = "3px"

                            // Input fields for link and name
                            const inputLink = createInput('text', 'Link', false);
                            const inputName = createInput('text', 'Name', false);
                            
                            inputLink.style.display = "block"; // Initially enabled
                            inputName.value = link.name;
                            inputLink.value = link.link;


                            // Event listeners for input fields to track changes

                            inputLink.addEventListener('input', function() {
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            });

                            inputName.addEventListener('input', function() {
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            });


                            // Event listeners for radio buttons to enable/disable fields
                            enterLinkRadio.addEventListener('change', function() {
                                selectFormDropdown.style.display = 'none'; // Hide the dropdown
                                inputLink.style.display = 'block'; // Show the link input
                            });

                            chooseFormRadio.addEventListener('change', function() {
                            
                                selectFormDropdown.style.display = 'block'; // Show the dropdown
                                inputLink.style.display = 'none'; // Hide the link input
                            });

                            const deleteButton = document.createElement('div');
                            deleteButton.innerHTML = `<i class="fa-solid fa-trash"></i>`;
                            deleteButton.classList.add('deleteButton');
                            deleteButton.onclick = function() {
                                linkContainer.removeChild(linkDiv);
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            };

                            linkDiv.innerHTML += `<svg id="drag_icon" style="margin-left:auto" width="20px" height="30px" xmlns="http://www.w3.org/2000/svg">
                                        <!-- First row of dots -->
                                        <circle cx="5" cy="5" r="2" fill="black"></circle>
                                        <circle cx="15" cy="5" r="2" fill="black"></circle>

                                        <!-- Second row of dots -->
                                        <circle cx="5" cy="15" r="2" fill="black"></circle>
                                        <circle cx="15" cy="15" r="2" fill="black"></circle>
                                    </svg>`;


                            // Append radio buttons to the radio container
                            radioContainer.appendChild(enterLinkRadio);
                            radioContainer.appendChild(chooseFormRadio);

                            // Append all elements to linkDiv
                            linkDiv.appendChild(radioContainer);
                            linkDiv.appendChild(selectFormDropdown);
                            linkDiv.appendChild(inputLink);
                            linkDiv.appendChild(inputName);
                            linkDiv.appendChild(deleteButton);

                            // Append linkDiv to the linkContainer
                            linkContainer.appendChild(linkDiv);
                        

                            // Helper function to create radio buttons
                            function createRadio(name, linkCount, label, checked) {
                                const radio = document.createElement('input');
                                radio.type = 'radio';
                                radio.name = `linkChoice${linkCount}`;
                                radio.value = name;
                                radio.checked = checked;
                                radio.style.marginLeft = "10px"
                                
                                const labelElement = document.createElement('label');
                                labelElement.textContent = label;
                                labelElement.appendChild(radio);
                                
                                return labelElement;
                            }

                            // Helper function to create input fields
                            function createInput(type, placeholder, disabled) {
                                const input = document.createElement('input');
                                input.type = type;
                                input.placeholder = placeholder;
                                input.style.marginTop = "2px";
                                input.style.marginBottom = "2px"
                                return input;
                            }

                        }else if(link.type == "heading"){
                            const linkDiv = document.createElement('div');
                            linkDiv.classList.add('link', 'break_between_inputs');

                            // Create SVG element
                            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                            svg.setAttribute('id', 'drag_icon');
                            svg.setAttribute('width', '20px');
                            svg.setAttribute('height', '30px');
                            svg.style.marginLeft = 'auto';

                            // Create circles for the SVG
                            for (let i = 0; i < 4; i++) {
                                const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                                circle.setAttribute('cx', (i % 2) * 10 + 5); // 5, 15, 5, 15
                                circle.setAttribute('cy', Math.floor(i / 2) * 10 + 5); // 5, 5, 15, 15
                                circle.setAttribute('r', '2');
                                circle.setAttribute('fill', 'black');
                                svg.appendChild(circle);
                            }

                            // Append SVG to linkDiv
                            linkDiv.appendChild(svg);

                            // Create input for heading
                            if (link.type === 'heading') {
                                const inputHeading = document.createElement('input');
                                inputHeading.type = 'text';
                                inputHeading.value = link.heading;
                                inputHeading.placeholder = 'Heading';
                                linkDiv.appendChild(inputHeading);

                                // Add event listener for the heading input
                                inputHeading.addEventListener('input', function() {
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                });
                            }

                            // Create the delete button
                            const deleteButton = document.createElement('div');
                            deleteButton.classList.add('deleteButton');
                            deleteButton.innerHTML = `<i class="fa-solid fa-trash" aria-hidden="true"></i>`;

                            // Event listener for the delete button
                            deleteButton.addEventListener('click', function() {
                                linkContainer.removeChild(linkDiv);
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            });

                            // Append delete button to linkDiv
                            linkDiv.appendChild(deleteButton);

                            // Append linkDiv to the linkContainer
                            linkContainer.appendChild(linkDiv);
                        }else{
                            const linkCounter = linkContainer.children.length + 1;
                            const linkDiv = document.createElement('div');
                            linkDiv.classList.add('link');

                            // Flex container for horizontal radio buttons
                            const radioContainer = document.createElement('div');
                            radioContainer.classList.add('radio-container');


                            // Radio buttons for choosing between "Enter Link" and "Choose Form"
                            const enterLinkRadio = createRadio(`enterLink`, linkCounter, 'Enter Link', false);
                            const chooseFormRadio = createRadio(`chooseForm`, linkCounter, 'Choose Form', true);

                            // Dropdown for selecting predefined forms
                            const selectFormDropdown = document.createElement('select');
                            selectFormDropdown.style.display = "block"; // Initially disabled
                            // Add options to the dropdown (replace with your own options)
                            selectFormDropdown.classList.add("form_select")
                            forms.forEach(form=>{
                                if(form.id == link.link){
                                    selectFormDropdown.innerHTML += `<option selected value="${form.id}">${form.name}</option>`
                                }else{
                                    selectFormDropdown.innerHTML += `<option value="${form.id}">${form.name}</option>`
                                }
                            })
                            selectFormDropdown.style.borderRadius = "30px"
                            selectFormDropdown.style.marginBottom = "3px"

                            // Input fields for link and name
                            const inputLink = createInput('text', 'Link', false);
                            const inputName = createInput('text', 'Name', false);
                            
                            inputLink.style.display = "none"; // Initially enabled
                            inputName.value = link.name;


                            // Event listeners for input fields to track changes

                            inputLink.addEventListener('input', function() {
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            });

                            inputName.addEventListener('input', function() {
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            });


                            // Event listeners for radio buttons to enable/disable fields
                            enterLinkRadio.addEventListener('change', function() {
                                selectFormDropdown.style.display = 'none'; // Hide the dropdown
                                inputLink.style.display = 'block'; // Show the link input
                            });

                            chooseFormRadio.addEventListener('change', function() {
                            
                                selectFormDropdown.style.display = 'block'; // Show the dropdown
                                inputLink.style.display = 'none'; // Hide the link input
                            });

                            const deleteButton = document.createElement('div');
                            deleteButton.innerHTML = `<i class="fa-solid fa-trash"></i>`;
                            deleteButton.classList.add('deleteButton');
                            deleteButton.onclick = function() {
                                linkContainer.removeChild(linkDiv);
                                const arrangement = extractData();
                                populateProfilePreview(arrangement);
                            };

                            linkDiv.innerHTML += `<svg id="drag_icon" style="margin-left:auto" width="20px" height="30px" xmlns="http://www.w3.org/2000/svg">
                                        <!-- First row of dots -->
                                        <circle cx="5" cy="5" r="2" fill="black"></circle>
                                        <circle cx="15" cy="5" r="2" fill="black"></circle>

                                        <!-- Second row of dots -->
                                        <circle cx="5" cy="15" r="2" fill="black"></circle>
                                        <circle cx="15" cy="15" r="2" fill="black"></circle>
                                    </svg>`;


                            // Append radio buttons to the radio container
                            radioContainer.appendChild(enterLinkRadio);
                            radioContainer.appendChild(chooseFormRadio);

                            // Append all elements to linkDiv
                            linkDiv.appendChild(radioContainer);
                            linkDiv.appendChild(selectFormDropdown);
                            linkDiv.appendChild(inputLink);
                            linkDiv.appendChild(inputName);
                            linkDiv.appendChild(deleteButton);

                            // Append linkDiv to the linkContainer
                            linkContainer.appendChild(linkDiv);
                        

                        // Helper function to create radio buttons
                            function createRadio(name, linkCount, label, checked) {
                                const radio = document.createElement('input');
                                radio.type = 'radio';
                                radio.name = `linkChoice${linkCount}`;
                                radio.value = name;
                                radio.checked = checked;
                                radio.style.marginLeft = "10px"
                                
                                const labelElement = document.createElement('label');
                                labelElement.textContent = label;
                                labelElement.appendChild(radio);
                                
                                return labelElement;
                            }

                            // Helper function to create input fields
                            function createInput(type, placeholder, disabled) {
                                const input = document.createElement('input');
                                input.type = type;
                                input.placeholder = placeholder;
                                input.style.marginTop = "2px";
                                input.style.marginBottom = "2px"
                                return input;
                            }

                        }
                    })
                }


                if(links && links.length > 0){
                    populateLinksAndPreview(links);
                }else{
                    populateLinksAndPreview(defaltLinks.temp1);
                }
                const arrangement = extractData();
                populateProfilePreview(arrangement);

            }

            function populateQuestions(questionsArray) {
                const container = document.getElementById('questionContainer');

                questionsArray.forEach((question, questionIndex) => {
                    // Create the question container
                    const questionGroup = document.createElement('div');
                    questionGroup.className = 'question-group-insurance';

                    // Create the question input
                    const questionInput = document.createElement('input');
                    questionInput.type = 'text';
                    questionInput.className = 'border mt-1 border-3 p-2 form-control question';
                    questionInput.name = 'question[]';
                    questionInput.placeholder = 'Question';
                    questionInput.value = question.question; // Assuming 'text' property holds the question text

                    // Create the "Add Option" button
                    const addOptionButton = document.createElement('button');
                    addOptionButton.type = 'button';
                    addOptionButton.className = 'add-option-button m-1';
                    addOptionButton.textContent = 'Add Option';

                    // Create the "Delete Question" button
                    const deleteQuestionButton = document.createElement('button');
                    deleteQuestionButton.type = 'button';
                    deleteQuestionButton.className = 'delete-question-button m-1';
                    deleteQuestionButton.textContent = 'Delete Question';

                    // Create the options container
                    const optionsContainer = document.createElement('div');
                    optionsContainer.className = 'options-container';

                    // Loop through each option in the question
                    question.options.forEach((option, optionIndex) => {
                    // Create the option container
                    const optionContainer = document.createElement('div');
                    optionContainer.className = 'option';

                    // Create the option input
                    const optionInput = document.createElement('input');
                    optionInput.type = 'text';
                    optionInput.className = 'border mt-1 border-3 p-2 form-control options';
                    optionInput.name = 'option[]';
                    optionInput.placeholder = 'Option';
                    optionInput.value = option; // Assuming 'text' property holds the option text

                    // Create the "Delete Option" button
                    const deleteOptionButton = document.createElement('button');
                    deleteOptionButton.type = 'button';
                    deleteOptionButton.className = 'delete-option-button my-1';
                    deleteOptionButton.textContent = 'Delete Option';

                    // Add event listener to delete option button
                    deleteOptionButton.addEventListener('click', () => {
                        optionContainer.remove();
                    });

                    // Append option input and delete button to the option container
                    optionContainer.appendChild(optionInput);
                    optionContainer.appendChild(deleteOptionButton);

                    // Append option container to the options container
                    optionsContainer.appendChild(optionContainer);
                    });

                    // Add event listener to add option button
                    addOptionButton.addEventListener('click', () => {
                    // Add a new option when the button is clicked
                    const optionContainer = document.createElement('div');
                    optionContainer.className = 'option';

                    const optionInput = document.createElement('input');
                    optionInput.type = 'text';
                    optionInput.className = 'border mt-1 border-3 p-2 form-control options';
                    optionInput.name = 'option[]';
                    optionInput.placeholder = 'Option';

                    const deleteOptionButton = document.createElement('button');
                    deleteOptionButton.type = 'button';
                    deleteOptionButton.className = 'delete-option-button';
                    deleteOptionButton.textContent = 'Delete Option';

                    deleteOptionButton.addEventListener('click', () => {
                        optionContainer.remove();
                    });

                    optionContainer.appendChild(optionInput);
                    optionContainer.appendChild(deleteOptionButton);

                    optionsContainer.appendChild(optionContainer);
                    });

                    // Add event listener to delete question button
                    deleteQuestionButton.addEventListener('click', () => {
                        questionGroup.remove();
                    });

                    // Append question input, buttons, and options container to the question group
                    questionGroup.appendChild(questionInput);
                    questionGroup.appendChild(addOptionButton);
                    questionGroup.appendChild(deleteQuestionButton);
                    questionGroup.appendChild(optionsContainer);

                    // Append the question group to the target container
                    container.appendChild(questionGroup);
                });
            }
        

            function addQuestion(questionsArray) {
                    const container = document.getElementById("questionsContainer_meta");
                    questionsArray.forEach((questionData) => {
                    const questionGroup = document.createElement("div");
                    questionGroup.className = "question-group";

                    const questionInput = document.createElement("input");
                    questionInput.type = "text";
                    questionInput.value = questionData.question;
                    questionInput.name = "question[]";
                    questionInput.placeholder = "Question";
                    questionInput.className = "question";

                    questionInput.addEventListener("input", () => {
                        question_populate_logic();
                    });

                    const addOptionButton = document.createElement("button");
                    addOptionButton.type = "button";
                    addOptionButton.className = "add-option-button";
                    addOptionButton.textContent = "Add Option";

                    const deleteQuestionButton = document.createElement("button");
                    deleteQuestionButton.type = "button";
                    deleteQuestionButton.className = "delete-question-button";
                    deleteQuestionButton.textContent = "Delete Question";

                    const optionsContainer = document.createElement("div");
                    optionsContainer.className = "options-container";

                    questionData.options.forEach((option) => {
                        const optionDiv = document.createElement("div");
                        optionDiv.className = "option";

                        const optionInput = document.createElement("input");
                        optionInput.type = "text";
                        optionInput.value = option;
                        optionInput.name = "option[]";
                        optionInput.placeholder = "Option";
                        optionInput.className = "options";

                        optionInput.addEventListener("input", () => {
                            question_populate_logic();
                        });

                        const deleteOptionButton = document.createElement("button");
                        deleteOptionButton.type = "button";
                        deleteOptionButton.className = "delete-option-button";
                        deleteOptionButton.textContent = "Delete option";

                        deleteOptionButton.addEventListener("click", () => {
                            // Logic to handle deleting the option
                            optionDiv.remove();
                        });

                        optionDiv.appendChild(optionInput);
                        optionDiv.appendChild(deleteOptionButton);
                        optionsContainer.appendChild(optionDiv);
                    });

                    addOptionButton.addEventListener("click", () => {
                        // Add logic to handle adding a new option
                        const optionDiv = document.createElement("div");
                        optionDiv.className = "option";

                        const optionInput = document.createElement("input");
                        optionInput.type = "text";
                        optionInput.name = "option[]";
                        optionInput.placeholder = "Option";
                        optionInput.className = "options";

                        optionInput.addEventListener("input", () => {
                            question_populate_logic();
                        });


                        const deleteOptionButton = document.createElement("button");
                        deleteOptionButton.type = "button";
                        deleteOptionButton.className = "delete-option-button";
                        deleteOptionButton.textContent = "Delete option";

                        deleteOptionButton.addEventListener("click", () => {
                            // Logic to handle deleting the new option
                            optionDiv.remove();
                        });

                        optionDiv.appendChild(optionInput);
                        optionDiv.appendChild(deleteOptionButton);
                        optionsContainer.appendChild(optionDiv);
                    });

                    deleteQuestionButton.addEventListener("click", () => {
                        // Add logic to handle deleting the entire question group
                        questionGroup.remove();
                    });

                    questionGroup.appendChild(questionInput);
                    questionGroup.appendChild(addOptionButton);
                    questionGroup.appendChild(deleteQuestionButton);
                    questionGroup.appendChild(optionsContainer);

                    // Append the question group to the document
                    container.appendChild(questionGroup);
                });

                function question_populate_preview(params) {
                    const questionInputs = document.querySelectorAll(".question");
                    const answers = [];
                
                    questionInputs.forEach(questionInput => {
                    let optionsContainer = questionInput;
                    for (let i = 0; i < 3; i++) {
                        optionsContainer = optionsContainer.nextElementSibling;
                    }
                    const questionText = questionInput.value;
                    const optionsInputs = optionsContainer.querySelectorAll('.option input');
                    // const optionsContainer = questionInput.closest(".question-group").querySelectorAll(".option input");
                    const options = [];
                    optionsInputs.forEach(optionInput => {
                        options.push(optionInput.value);
                    });
                    answers.push({ question: questionText, options: options });
                    });
                    return answers;
                }

                function question_populate_logic() {
                    const question_div = document.getElementById('question-div');
                    const arr = question_populate_preview()
                    question_div.innerHTML = "";
                    for (let i = 0; i < arr.length; i++) {
                        let optionsHTML = '';
                        for (let j = 0; j < arr[i].options.length; j++) {
                        optionsHTML += `
                            <label class="container">
                            <input type="radio" name="question${i}" value="${arr[i].options[j]}">
                            <span class="checkmark" data-value="${arr[i].options[j]}">${arr[i].options[j]}</span>
                            </label>
                        `;
                        }
                        question_div.innerHTML += `
                        <div class="inside-tab radio-div">
                            <h3 class="heading">${arr[i].question}</h3>
                            <div>
                            ${optionsHTML}
                            </div>
                        </div>
                        `;
                    }
                }
          

          question_populate_logic()
            }

            async function client_edit_popup(elem){
               const clientID = elem.getAttribute("clientid");
               document.querySelector(".overlay_loading").style.display = "block"
               const {client} = await fetchClientDetails(clientID);
               document.querySelector(".overlay_loading").style.display = "none"

               document.getElementById("client_name_edit").value = client.name;
               document.getElementById("client_email_edit").value = client.email;
               document.getElementById("client_del").setAttribute("clientid",client.id);
               const clientedit_popup  = document.querySelector(".clientedit-popup");
               document.getElementById("client_edit_post_btn").setAttribute("clientId", client.id);
               clientedit_popup.classList.add("open_popup");
               clientedit_popup.classList.remove("close_popup");


               overlay.style.display = "block";
            }

            async function editclientPost (){
               const name = document.getElementById("client_name_edit").value
               const email = document.getElementById("client_email_edit").value
               const password = document.getElementById("client_password_edit").value
               const clientId = document.getElementById("client_edit_post_btn").getAttribute("clientId");
               document.querySelector(".overlay_loading").style.display = "block"

               const res = await fetch(`/editclient/${clientId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: name,
                        email:email,
                        password:password
                    })
                })
                if(res.status == 400){
                    hideLoadingOverlay();
                    return alert("Client already present with these details");
                }else if(res.status == 200){
                    window.location.reload();
                }
            }

            async function deleteClient(elem){
                Swal.fire({
                title: "Do you want to Delete the Client?",
                showCancelButton: true,
                confirmButtonText: "Delete",
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        showLoadingOverlay();
                        const id = elem.getAttribute("clientid");
                        const res = await fetch(`/api/deleteclient/${id}`, {
                            method:"GET"
                        });
                        if(res.status == 200){
                            window.location.reload();
                        }else{
                        swal.fire({
                                title: "Error",
                                text: resData.message,
                                icon: "error",
                                confirmButtonText: "Ok",
                                confirmButtonColor: "#002655",
                            });
                            hideLoadingOverlay();
                        }
                    } else if (result.isDenied) {
                        hideLoadingOverlay();
                        Swal.fire("Changes are not saved", "", "info");
                    }
            });
            }
       

            async function fetchFormDetail(id){
                const res = await fetch(`/api/getForm/${id}`,{
                    method:"GET"
                })
                const data = await res.json();
                return data;
            }

            function populateEditForm(form){
                const ds_container = document.getElementById("discord_container");
                ds_container.innerHTML = ""
                document.getElementsByClassName("discord-metaform-input")[0].value = "";

                document.getElementById("form_submit_btn").setAttribute("onclick", `editForm(${form.id})`);
                
                // ################ Populate Discord ####################
                form.discords.forEach((discord, index)=>{
                    if(index == 0){
                        document.getElementsByClassName("discord-metaform-input")[0].value = discord;
                    }else{
                        

                        let newInput = document.createElement('div');
                        newInput.innerHTML ='<div class="discord-input-container-metaform">' +
                                        `    <input type="text" value="${discord}" class="form_input discord-metaform-input" placeholder="Discord Link" name="dslink[]">` +
                                        '    <button type="button" class="my-1 p-2 rounded-2 remove-discord-input" onclick="removeDiscordmetaform(this)">Remove</button>' +
                                        '</div>';
                        ds_container.insertBefore(newInput, ds_container.firstChild);
                    }
                })


                 // ################ Populate emails ####################
                 form.emails.forEach((email, index)=>{
                    if(index == 0){
                        document.getElementsByClassName("Emails-metaform-input")[0].value = email;
                    }else{
                        const Emails_container = document.getElementById("Emails_container")
                        Emails_container.innerHTML = ""
                        let newInput = document.createElement('div');
                        newInput.innerHTML ='<div class="Emails-input-container-metaform">' +
                                        `    <input type="text" value="${email}" class="form_input Emails-metaform-input" placeholder="Email Link" name="Emails[]">` +
                                        '    <button type="button" class="my-1 p-2 rounded-2 remove-Emails-input" onclick="removeEmailmetaform(this)">Remove</button>' +
                                        '</div>';
                        Emails_container.insertBefore(newInput, Emails_container.firstChild);
                    }
                })



                
               
                // ##################### Populate Questions#######################
                const questions_container = document.getElementById("questionsContainer_meta");
                document.getElementById("form_name").value = form.name;
                questions_container.innerHTML = "";
                    form.questions.forEach((question, index)=>{
                        let optionsHTML = '';
                        for (let j = 0; j < question.options.length; j++) {
                            optionsHTML += `
                            <div class="option">
                                <input type="text" value="${question.options[j]}" name="option[${j}]" placeholder="Option" class="options">
                                <button type="button" class="delete-option-button">Delete option</button>
                            </div>
                            `;
                        }
                        questions_container.innerHTML += `
                        <div class="question-group">
                            <input type="text" value="${question.question}" name="question[${index}]" placeholder="Question" class="question">
                            <button type="button" class="add-option-button">Add Option</button>
                            <button type="button" class="delete-question-button">Delete Question</button>
                            <div class="options-container">
                               ${optionsHTML}
                            </div>
                        </div>
                        `;
                    })

                        questions_container.innerHTML += `<button style="display: block;" type="button" id="add-question"
                    class="add-option-button">Add
                    Question</button>`
              
            
                    const existingQuestionGroups = document.querySelectorAll(".question-group");
                      existingQuestionGroups.forEach(function(questionGroup) {
                        attachEventListeners(questionGroup);
  
                  // Attach event listeners to existing options within this question group
                  const existingOptions = questionGroup.querySelectorAll(".options-container .option");
                      existingOptions.forEach(function(optionDiv) {
                        attachDeleteOptionButton(optionDiv);
                    });
                });



                    const addQuestionButton = document.getElementById("add-question");
                    addQuestionButton.addEventListener("click", function() {
                        const data = extractQuestionsAndOptions();
                        const questionGroup = document.createElement("div");
                        questionGroup.classList.add("question-group");
                        questionGroup.innerHTML = `
                        <input type="text" name="question[]" placeholder="Question" class="question">
                        <button type="button" class="add-option-button">Add Option</button>
                        <button type="button" class="delete-question-button">Delete Question</button>
                        <div class="options-container">
                            <div class="option">
                            <input type="text" name="option[]" placeholder="Option" class="options">
                            <button type="button" class="delete-option-button">Delete option</button>
                            </div>
                        </div>
                        `;
                        addQuestionButton.parentNode.insertBefore(questionGroup, addQuestionButton);
                        attachEventListeners(questionGroup);
                        const optionDiv = questionGroup.querySelector(".options-container .option");
                        attachDeleteOptionButton(optionDiv);
                  
  
  
                        //##############For preview Page ############
                        const questionInputs = document.querySelectorAll(".question");
                        questionInputs.forEach(questionInput => {
                            questionInput.addEventListener('input',populateQuestionsOnpreview)
                        })
        
                        const optionsInput = document.querySelectorAll(".options");
                            optionsInput.forEach(optionInput =>{
                            optionInput.addEventListener('input',populateQuestionsOnpreview);
                        })
                        //##############For preview Page ############
                    });
                    const questionInputs = document.querySelectorAll(".question");
                    questionInputs.forEach(questionInput => {
                        questionInput.addEventListener('input',populateQuestionsOnpreview)
                    })
    
                    const optionsInput = document.querySelectorAll(".options");
                        optionsInput.forEach(optionInput =>{
                        optionInput.addEventListener('input',populateQuestionsOnpreview);
                    })




              function attachEventListeners(questionGroup) {
                const addOptionButton = questionGroup.querySelector(".add-option-button");
                const deleteQuestionButton = questionGroup.querySelector(".delete-question-button");
                
                addOptionButton.addEventListener("click", function() {
                        const optionsContainer = questionGroup.querySelector(".options-container");
                        const optionDiv = document.createElement("div");
                        optionDiv.classList.add("option");
                        optionDiv.innerHTML = `
                        <input type="text" class="options" name="option[]" placeholder="Option">
                        <button type="button" class="delete-option-button">Delete option</button>
                        `;
                        optionsContainer.appendChild(optionDiv);
                        attachDeleteOptionButton(optionDiv);
                        //########## for preview Page #########//
                        const optionsInput = optionDiv.querySelectorAll(".options");
                            optionsInput.forEach(optionInput =>{
                            optionInput.addEventListener('input',populateQuestionsOnpreview);
                            })
                        //########## for preview Page #########//
                        });
                    
                        deleteQuestionButton.addEventListener("click", function() {
                        populateQuestionsOnpreview();
                        questionGroup.remove();
                        });
                    }




                    function attachDeleteOptionButton(optionDiv) {
                        const deleteOptionButton = optionDiv.querySelector(".delete-option-button");
                        deleteOptionButton.addEventListener("click", function() {
                        optionDiv.remove();
                        });
                    }


                    populateQuestionsOnpreview();
                    function populateQuestionsOnpreview() {
                        const preview_question_container = document.querySelector('.preview_question_container');
                        const question_div = document.createElement('div');
                        const arr = extractQuestionsAndOptions()
                        preview_question_container.innerHTML = "";
                        
                        for (let i = 0; i < arr.length; i++) {
                            let optionsHTML = '';
                            if(arr[i].options.length == 0){
                                question_div.innerHTML += `
                                <p style="margin-bottom: 3px; color: black">${arr[i].question}</p>
                                <input class="form_input" placeholder="Type here..."></input>
                                `
                            }else{
                                for (let j = 0; j < arr[i].options.length; j++) {
                                optionsHTML += `
                                    <option value=${arr[i].options[j]}>${arr[i].options[j]}</option>
                                    `;
                                }
                                question_div.innerHTML += `
                                <p style="margin-bottom: 3px; color: black">${arr[i].question}</p>
                                <select>
                                ${optionsHTML}  
                                </select>
                                `
                            }
                            preview_question_container.appendChild(question_div);
                        }
                    }

                    function extractQuestionsAndOptions(params) {
                    const questionInputs = document.querySelectorAll(".question");
                    const answers = [];
                
                    questionInputs.forEach(questionInput => {
                    let optionsContainer = questionInput;
                    for (let i = 0; i < 3; i++) {
                        optionsContainer = optionsContainer.nextElementSibling;
                    }
                    const questionText = questionInput.value;
                    const optionsInputs = optionsContainer.querySelectorAll('.option input');
                    const options = [];
                    optionsInputs.forEach(optionInput => {
                        options.push(optionInput.value);
                    });
                    answers.push({ question: questionText, options: options });
                    });
                    return answers;
                }


            }

            async function edit_Form_show(btn) {
                const formId = btn.getAttribute("form_id")
                overlay.style.display = "block";
                const {form} = await fetchFormDetail(formId);
                populateEditForm(form);
                document.getElementById("form_popup").classList.add("open_popup");
                document.getElementById("form_popup").classList.remove("close_popup");
            }
   
            function openLastCreatedProfile() {
                const lastCreatedProfileID = localStorage.getItem('lastCreatedProfileID');
                if (lastCreatedProfileID) {
                    const elem =  document.createElement('a');
                    elem.setAttribute('profile_id', lastCreatedProfileID);
                    editHandler(elem);
                    localStorage.removeItem('lastCreatedProfileID');
                }
            }
            
            function formDeleteHandler(btn) {
                const form_id = btn.getAttribute("form_id");
                swal.fire({
                    title: "Do you want to Delete the Form?",
                    showCancelButton: true,
                    confirmButtonText: "Delete",
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            showLoadingOverlay();
                            const res = await fetch(`/api/deleteform/${form_id}`, {
                                method:"GET"
                            });
                            if(res.status == 200){
                                hideLoadingOverlay();
                                Swal.fire({
                                    title: "Form Deleted Successfully",
                                    icon: "success",
                                    confirmButtonText: "Ok",
                                })
                                const id = document.getElementById("profile_id").getAttribute("profile_id");
                                const {forms} = await fetchProfileDetail(id);
                                populateEditFormSection(forms);
                            }else{
                            swal.fire({
                                    title: "Error",
                                    text: resData.message,
                                    icon: "error",
                                    confirmButtonText: "Ok",
                                    confirmButtonColor: "#002655",
                                });
                                hideLoadingOverlay();
                            }
                        } else if (result.isDenied) {
                            hideLoadingOverlay();
                            Swal.fire("Changes are not saved", "", "info");
                        }
                });   
            }
            
            async function editForm(formId) {
                event.preventDefault();
                if(!validate()){
                    return;
                }
                const {discordLinkValues, emailLinkValues} = extractDiscordAndMails();  
                const name = document.getElementById("form_name").value;
                const questions = extractQuestionsAndOptions();
                const res = await fetch(`/api/updateForm/${formId}`, {
                    method: "POST",
                    body: JSON.stringify({
                        name: name,
                        questions: questions,
                        discord: discordLinkValues,
                        emails:emailLinkValues
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                })
                const resData = await res.json();
                if(res.status == 200){
                    Swal.fire({
                        title: "Form Edited Successfully",
                        icon: "success",
                        confirmButtonText: "Ok",
                    })
                    const id = document.getElementById("profile_id").getAttribute("profile_id");
                    const {forms} = await fetchProfileDetail(id);
                    populateEditFormSection(forms);
                    document.getElementById("form_popup").classList.remove("open_popup");
                    document.getElementById("form_popup").classList.add("close_popup");
                    const overlay = document.getElementById("overlay");
                    overlay.style.display = "none";
                }else{
                    alert(resData.message);
                    return;
                }
            }
            
            
            
        </script>
        <%}else{%>
            <script>
                async function fetchClientDetails(clientid){
                    const res = await fetch(`/api/getClient/${clientid}`,{
                        method:"GET"
                    })
                    const data = await res.json();
                    return data;
                }
                
                populateFormsBasedonCLient();
                async function populateFormsBasedonCLient(){
                    document.getElementById("show_profiles_div").classList.remove("d-none");
                    const clientid = `<%=currentUser.id%>`;
                    const {client, profiles} = await fetchClientDetails(clientid);
                    document.querySelector(".profile_edit_container").style.display = "none";
                    const showformdiv = document.getElementById("show_profiles");
                    showformdiv.innerHTML = "";

                    if (!profiles || profiles.length == 0) {
                    showformdiv.innerHTML = `
                    <h4 class="text-center" > No profiles </h4>
                    `
                    }else{
                        showformdiv.innerHTML = `<h4 class="text-center" > profiles </h4>`
                        profiles.forEach(profile=>{
                            const uniqueID = generateLongStringWithDelimiter(profile.id);
                            showformdiv.innerHTML += `            
                        <div class="d-flex mt-3 forms_div">
                            <div topic="project" profile_id="${profile.id}" contenteditable="true" style="outline: 0px solid transparent; align-items: center; width: 300px; height: 100%;" class="editable_div d-flex ps-4">${profile.name}</div> 
                            
                            <div class="options_div ms-auto" > 
                                
        
                                <a target="_blank" href="/profile/${uniqueID}" class="big_icon btn btn-sm btn-facebook mt-3 me-2" >
                                    View
                                </a>
        
                                <a target="_blank"  href="/profile/${uniqueID}" class="small_icon mt-3 ms-4">
                                    <i class="fa-solid fa-eye"></i>
                                </a>
                                
                                
                                
                                <a href="/api/delete/profile/${profile.id}" class="big_icon mt-3 btn-sm btn btn-danger me-2" >
                                Delete
                                </a>
        
                                <a href="/api/delete/profile/${profile.id}" class="small_icon mt-3 ms-4">
                                    <i class="fa-solid fa-trash"></i>
                                </a>
        
                                
                                
        
                                <button style="background-color:#002655" onclick="editHandler(this)" profile_id="${profile.id}"  class="big_icon btn btn-sm btn-facebook mt-3 me-2">
                                    Edit
                                </button>
        
                                <button style="background-color:transparent !important" onclick="editHandler(this)" profile_id="${profile.id}"  class="small_icon mt-3 ms-4 me-3">
                                    <i class="fa-solid fa-pen-to-square" style="color: #213454;"></i> 
                                </button>
                            </div>
                        </div> `
        
                        })
                    }
                }


                async function editHandler(curr_elem){
                    const id = curr_elem.getAttribute("profile_id");
                    const {profile, links, forms} = await fetchProfileDetail(id);
                    document.querySelector(".profile_edit_container").style.display = "block";
                    const showformdiv = document.getElementById("show_profiles").innerHTML = "";
                    

                    // ########### Filling all the prexisting details to the edit page ###########
                    const templates = document.querySelectorAll(".image-container");
                    templates.forEach(template=>{
                        if(template.getAttribute("template_id") == profile.template_selected){
                            template.classList.add("selected");
                        }else{
                            template.classList.remove("selected");
                        }
                    })
                    document.getElementById("profile_id").setAttribute("profile_id",id);
                    document.querySelector(".agent-name").innerHTML = profile.name;
                    document.getElementById("temp2_name").innerText = profile.name;
                    document.getElementById("temp3_name").innerText = profile.name;
                    const preview_profile_img = document.getElementsByClassName("preview_profile_img");
                        for (let i = 0; i < preview_profile_img.length; i++) {
                            preview_profile_img[i].src = profile.profile_img_path;
                        }

                    
                    profileDataState.templateSelected = profile.template_selected;
                    document.getElementById("phone").value = profile.phone;
                    document.getElementById("fb_link").value = profile.fb_link;
                    document.getElementById("insta_link").value = profile.insta_link;
                    document.getElementById("linkedin_link").value = profile.linkedin_link;


                    //Populating the Edit Form dropdown
                    populateEditFormSection(forms);

                    function populateLinksAndPreview(links) {
                        const linkContainer = document.getElementById("link_container_dynamic");
                        linkContainer.innerHTML = "";
                        links.forEach(link=>{
                            if (link.type == "link") {
                                const linkCounter = linkContainer.children.length + 1;
                                const linkDiv = document.createElement('div');
                                linkDiv.classList.add('link');

                                // Flex container for horizontal radio buttons
                                const radioContainer = document.createElement('div');
                                radioContainer.classList.add('radio-container');

                                // Radio buttons for choosing between "Enter Link" and "Choose Form"
                                const enterLinkRadio = createRadio(`enterLink`, linkCounter, 'Enter Link', true);
                                const chooseFormRadio = createRadio(`chooseForm`, linkCounter, 'Choose Form', false);

                                // Dropdown for selecting predefined forms
                                const selectFormDropdown = document.createElement('select');
                                selectFormDropdown.style.display = "none"; // Initially disabled
                                // Add options to the dropdown (replace with your own options)
                                selectFormDropdown.classList.add("form_select")
                                forms.forEach(form=>{
                                    if(form.id == link.link){
                                        selectFormDropdown.innerHTML += `<option selected value="${form.id}">${form.name}</option>`
                                    }else{
                                        selectFormDropdown.innerHTML += `<option value="${form.id}">${form.name}</option>`
                                    }
                                })
                                selectFormDropdown.style.borderRadius = "30px"
                                selectFormDropdown.style.marginBottom = "3px"

                                // Input fields for link and name
                                const inputLink = createInput('text', 'Link', false);
                                const inputName = createInput('text', 'Name', false);
                                
                                inputLink.style.display = "block"; // Initially enabled
                                inputName.value = link.name;
                                inputLink.value = link.link;


                                // Event listeners for input fields to track changes

                                inputLink.addEventListener('input', function() {
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                });

                                inputName.addEventListener('input', function() {
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                });


                                // Event listeners for radio buttons to enable/disable fields
                                enterLinkRadio.addEventListener('change', function() {
                                    selectFormDropdown.style.display = 'none'; // Hide the dropdown
                                    inputLink.style.display = 'block'; // Show the link input
                                });

                                chooseFormRadio.addEventListener('change', function() {
                                
                                    selectFormDropdown.style.display = 'block'; // Show the dropdown
                                    inputLink.style.display = 'none'; // Hide the link input
                                });

                                const deleteButton = document.createElement('div');
                                deleteButton.innerHTML = `<i class="fa-solid fa-trash"></i>`;
                                deleteButton.classList.add('deleteButton');
                                deleteButton.onclick = function() {
                                    linkContainer.removeChild(linkDiv);
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                };

                                linkDiv.innerHTML += `<svg id="drag_icon" style="margin-left:auto" width="20px" height="30px" xmlns="http://www.w3.org/2000/svg">
                                            <!-- First row of dots -->
                                            <circle cx="5" cy="5" r="2" fill="black"></circle>
                                            <circle cx="15" cy="5" r="2" fill="black"></circle>

                                            <!-- Second row of dots -->
                                            <circle cx="5" cy="15" r="2" fill="black"></circle>
                                            <circle cx="15" cy="15" r="2" fill="black"></circle>
                                        </svg>`;


                                // Append radio buttons to the radio container
                                radioContainer.appendChild(enterLinkRadio);
                                radioContainer.appendChild(chooseFormRadio);

                                // Append all elements to linkDiv
                                linkDiv.appendChild(radioContainer);
                                linkDiv.appendChild(selectFormDropdown);
                                linkDiv.appendChild(inputLink);
                                linkDiv.appendChild(inputName);
                                linkDiv.appendChild(deleteButton);

                                // Append linkDiv to the linkContainer
                                linkContainer.appendChild(linkDiv);
                            

                                // Helper function to create radio buttons
                                function createRadio(name, linkCount, label, checked) {
                                    const radio = document.createElement('input');
                                    radio.type = 'radio';
                                    radio.name = `linkChoice${linkCount}`;
                                    radio.value = name;
                                    radio.checked = checked;
                                    radio.style.marginLeft = "10px"
                                    
                                    const labelElement = document.createElement('label');
                                    labelElement.textContent = label;
                                    labelElement.appendChild(radio);
                                    
                                    return labelElement;
                                }

                                // Helper function to create input fields
                                function createInput(type, placeholder, disabled) {
                                    const input = document.createElement('input');
                                    input.type = type;
                                    input.placeholder = placeholder;
                                    input.style.marginTop = "2px";
                                    input.style.marginBottom = "2px"
                                    return input;
                                }

                            }else if(link.type == "heading"){
                                const linkDiv = document.createElement('div');
                                linkDiv.classList.add('link', 'break_between_inputs');

                                // Create SVG element
                                const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                                svg.setAttribute('id', 'drag_icon');
                                svg.setAttribute('width', '20px');
                                svg.setAttribute('height', '30px');
                                svg.style.marginLeft = 'auto';

                                // Create circles for the SVG
                                for (let i = 0; i < 4; i++) {
                                    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                                    circle.setAttribute('cx', (i % 2) * 10 + 5); // 5, 15, 5, 15
                                    circle.setAttribute('cy', Math.floor(i / 2) * 10 + 5); // 5, 5, 15, 15
                                    circle.setAttribute('r', '2');
                                    circle.setAttribute('fill', 'black');
                                    svg.appendChild(circle);
                                }

                                // Append SVG to linkDiv
                                linkDiv.appendChild(svg);

                                // Create input for heading
                                if (link.type === 'heading') {
                                    const inputHeading = document.createElement('input');
                                    inputHeading.type = 'text';
                                    inputHeading.value = link.heading;
                                    inputHeading.placeholder = 'Heading';
                                    linkDiv.appendChild(inputHeading);

                                    // Add event listener for the heading input
                                    inputHeading.addEventListener('input', function() {
                                        const arrangement = extractData();
                                        populateProfilePreview(arrangement);
                                    });
                                }

                                // Create the delete button
                                const deleteButton = document.createElement('div');
                                deleteButton.classList.add('deleteButton');
                                deleteButton.innerHTML = `<i class="fa-solid fa-trash" aria-hidden="true"></i>`;

                                // Event listener for the delete button
                                deleteButton.addEventListener('click', function() {
                                    linkContainer.removeChild(linkDiv);
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                });

                                // Append delete button to linkDiv
                                linkDiv.appendChild(deleteButton);

                                // Append linkDiv to the linkContainer
                                linkContainer.appendChild(linkDiv);
                            }else{
                                const linkCounter = linkContainer.children.length + 1;
                                const linkDiv = document.createElement('div');
                                linkDiv.classList.add('link');

                                // Flex container for horizontal radio buttons
                                const radioContainer = document.createElement('div');
                                radioContainer.classList.add('radio-container');


                                // Radio buttons for choosing between "Enter Link" and "Choose Form"
                                const enterLinkRadio = createRadio(`enterLink`, linkCounter, 'Enter Link', false);
                                const chooseFormRadio = createRadio(`chooseForm`, linkCounter, 'Choose Form', true);

                                // Dropdown for selecting predefined forms
                                const selectFormDropdown = document.createElement('select');
                                selectFormDropdown.style.display = "block"; // Initially disabled
                                // Add options to the dropdown (replace with your own options)
                                selectFormDropdown.classList.add("form_select")
                                forms.forEach(form=>{
                                    if(form.id == link.link){
                                        selectFormDropdown.innerHTML += `<option selected value="${form.id}">${form.name}</option>`
                                    }else{
                                        selectFormDropdown.innerHTML += `<option value="${form.id}">${form.name}</option>`
                                    }
                                })
                                selectFormDropdown.style.borderRadius = "30px"
                                selectFormDropdown.style.marginBottom = "3px"

                                // Input fields for link and name
                                const inputLink = createInput('text', 'Link', false);
                                const inputName = createInput('text', 'Name', false);
                                
                                inputLink.style.display = "none"; // Initially enabled
                                inputName.value = link.name;


                                // Event listeners for input fields to track changes

                                inputLink.addEventListener('input', function() {
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                });

                                inputName.addEventListener('input', function() {
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                });


                                // Event listeners for radio buttons to enable/disable fields
                                enterLinkRadio.addEventListener('change', function() {
                                    selectFormDropdown.style.display = 'none'; // Hide the dropdown
                                    inputLink.style.display = 'block'; // Show the link input
                                });

                                chooseFormRadio.addEventListener('change', function() {
                                
                                    selectFormDropdown.style.display = 'block'; // Show the dropdown
                                    inputLink.style.display = 'none'; // Hide the link input
                                });

                                const deleteButton = document.createElement('div');
                                deleteButton.innerHTML = `<i class="fa-solid fa-trash"></i>`;
                                deleteButton.classList.add('deleteButton');
                                deleteButton.onclick = function() {
                                    linkContainer.removeChild(linkDiv);
                                    const arrangement = extractData();
                                    populateProfilePreview(arrangement);
                                };

                                linkDiv.innerHTML += `<svg id="drag_icon" style="margin-left:auto" width="20px" height="30px" xmlns="http://www.w3.org/2000/svg">
                                            <!-- First row of dots -->
                                            <circle cx="5" cy="5" r="2" fill="black"></circle>
                                            <circle cx="15" cy="5" r="2" fill="black"></circle>

                                            <!-- Second row of dots -->
                                            <circle cx="5" cy="15" r="2" fill="black"></circle>
                                            <circle cx="15" cy="15" r="2" fill="black"></circle>
                                        </svg>`;


                                // Append radio buttons to the radio container
                                radioContainer.appendChild(enterLinkRadio);
                                radioContainer.appendChild(chooseFormRadio);

                                // Append all elements to linkDiv
                                linkDiv.appendChild(radioContainer);
                                linkDiv.appendChild(selectFormDropdown);
                                linkDiv.appendChild(inputLink);
                                linkDiv.appendChild(inputName);
                                linkDiv.appendChild(deleteButton);

                                // Append linkDiv to the linkContainer
                                linkContainer.appendChild(linkDiv);
                            

                            // Helper function to create radio buttons
                                function createRadio(name, linkCount, label, checked) {
                                    const radio = document.createElement('input');
                                    radio.type = 'radio';
                                    radio.name = `linkChoice${linkCount}`;
                                    radio.value = name;
                                    radio.checked = checked;
                                    radio.style.marginLeft = "10px"
                                    
                                    const labelElement = document.createElement('label');
                                    labelElement.textContent = label;
                                    labelElement.appendChild(radio);
                                    
                                    return labelElement;
                                }

                                // Helper function to create input fields
                                function createInput(type, placeholder, disabled) {
                                    const input = document.createElement('input');
                                    input.type = type;
                                    input.placeholder = placeholder;
                                    input.style.marginTop = "2px";
                                    input.style.marginBottom = "2px"
                                    return input;
                                    }

                                }
                            })
                        }


                        if(links && links.length > 0){
                            populateLinksAndPreview(links);
                        }else{
                            populateLinksAndPreview(defaltLinks.temp1);
                        }
                        const arrangement = extractData();
                        populateProfilePreview(arrangement);

                        console.log(profile);

                }
            
                function closeAllPopups() {
                    document.getElementsByClassName("questionContainer").innerHTML = "";
                    let openPopups = document.querySelectorAll('.open_popup');
                    openPopups.forEach(function(element) {
                        element.classList.remove('open_popup');
                        element.classList.add('close_popup');
                    }); 
                    overlay.style.display = "none";
                
                }
            
                function clearForm() {
                    const formElements = document.querySelectorAll('input, textarea');

                    formElements.forEach(element => {
                        element.value = '';
                    });
                }
            
                function formDeleteHandler(btn) {
                    const form_id = btn.getAttribute("form_id");
                    swal.fire({
                        title: "Do you want to Delete the Form?",
                        showCancelButton: true,
                        confirmButtonText: "Delete",
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                showLoadingOverlay();
                                const res = await fetch(`/api/deleteform/${form_id}`, {
                                    method:"GET"
                                });
                                if(res.status == 200){
                                    hideLoadingOverlay();
                                    Swal.fire({
                                        title: "Form Deleted Successfully",
                                        icon: "success",
                                        confirmButtonText: "Ok",
                                    })
                                    const id = document.getElementById("profile_id").getAttribute("profile_id");
                                    const {forms} = await fetchProfileDetail(id);
                                    populateEditFormSection(forms);
                                }else{
                                swal.fire({
                                        title: "Error",
                                        text: resData.message,
                                        icon: "error",
                                        confirmButtonText: "Ok",
                                        confirmButtonColor: "#002655",
                                    });
                                    hideLoadingOverlay();
                                }
                            } else if (result.isDenied) {
                                hideLoadingOverlay();
                                Swal.fire("Changes are not saved", "", "info");
                            }
                    });   
                }
                
                async function editForm(formId) {
                    event.preventDefault();
                    if(!validate()){
                        return;
                    }
                    const discordArray = extractDiscord();  
                    const name = document.getElementById("form_name").value;
                    const questions = extractQuestionsAndOptions();
                    const res = await fetch(`/api/updateForm/${formId}`, {
                        method: "POST",
                        body: JSON.stringify({
                            name: name,
                            questions: questions,
                            discord: discordArray
                        }),
                        headers: {
                            "Content-type": "application/json; charset=UTF-8"
                        }
                    })
                    const resData = await res.json();
                    if(res.status == 200){
                        Swal.fire({
                            title: "Form Edited Successfully",
                            icon: "success",
                            confirmButtonText: "Ok",
                        })
                        const id = document.getElementById("profile_id").getAttribute("profile_id");
                        const {forms} = await fetchProfileDetail(id);
                        populateEditFormSection(forms);
                        document.getElementById("form_popup").classList.remove("open_popup");
                        document.getElementById("form_popup").classList.add("close_popup");
                        const overlay = document.getElementById("overlay");
                        overlay.style.display = "none";
                    }else{
                        alert(resData.message);
                        return;
                    }
                }
            
                async function fetchFormDetail(id){
                const res = await fetch(`/api/getForm/${id}`,{
                    method:"GET"
                })
                const data = await res.json();
                return data;
            }

                function populateEditForm(form){

                    document.getElementById("form_submit_btn").setAttribute("onclick", `editForm(${form.id})`);
                    // ################ Populate Discord ####################
                    form.discords.forEach((discord, index)=>{
                        if(index == 0){
                            document.getElementsByClassName("discord-metaform-input")[0].value = discord;
                        }else{
                            const ds_container = document.getElementById("discord_metaform_field")
                            let newInput = document.createElement('div');
                            newInput.innerHTML ='<div class="discord-input-container-metaform">' +
                                            `    <input type="text" value="${discord}" class="form_input discord-metaform-input" placeholder="Discord Link" name="dslink[]">` +
                                            '    <button type="button" class="my-1 p-2 rounded-2 remove-discord-input" onclick="removeDiscordmetaform(this)">Remove</button>' +
                                            '</div>';
                            ds_container.insertBefore(newInput, ds_container.firstChild);
                        }
                    })
                
                    // ##################### Populate Questions#######################
                    const questions_container = document.getElementById("questionsContainer_meta");
                    document.getElementById("form_name").value = form.name;
                    questions_container.innerHTML = "";
                        form.questions.forEach((question, index)=>{
                            let optionsHTML = '';
                            for (let j = 0; j < question.options.length; j++) {
                                optionsHTML += `
                                <div class="option">
                                    <input type="text" value="${question.options[j]}" name="option[${j}]" placeholder="Option" class="options">
                                    <button type="button" class="delete-option-button">Delete option</button>
                                </div>
                                `;
                            }
                            questions_container.innerHTML += `
                            <div class="question-group">
                                <input type="text" value="${question.question}" name="question[${index}]" placeholder="Question" class="question">
                                <button type="button" class="add-option-button">Add Option</button>
                                <button type="button" class="delete-question-button">Delete Question</button>
                                <div class="options-container">
                                ${optionsHTML}
                                </div>
                            </div>
                            `;
                        })

                            questions_container.innerHTML += `<button style="display: block;" type="button" id="add-question"
                        class="add-option-button">Add
                        Question</button>`
                
                
                        const existingQuestionGroups = document.querySelectorAll(".question-group");
                        existingQuestionGroups.forEach(function(questionGroup) {
                            attachEventListeners(questionGroup);
    
                        // Attach event listeners to existing options within this question group
                        const existingOptions = questionGroup.querySelectorAll(".options-container .option");
                            existingOptions.forEach(function(optionDiv) {
                                attachDeleteOptionButton(optionDiv);
                            });
                        });



                        const addQuestionButton = document.getElementById("add-question");
                        addQuestionButton.addEventListener("click", function() {
                            const data = extractQuestionsAndOptions();
                            const questionGroup = document.createElement("div");
                            questionGroup.classList.add("question-group");
                            questionGroup.innerHTML = `
                            <input type="text" name="question[]" placeholder="Question" class="question">
                            <button type="button" class="add-option-button">Add Option</button>
                            <button type="button" class="delete-question-button">Delete Question</button>
                            <div class="options-container">
                                <div class="option">
                                <input type="text" name="option[]" placeholder="Option" class="options">
                                <button type="button" class="delete-option-button">Delete option</button>
                                </div>
                            </div>
                            `;
                            addQuestionButton.parentNode.insertBefore(questionGroup, addQuestionButton);
                            attachEventListeners(questionGroup);
                            const optionDiv = questionGroup.querySelector(".options-container .option");
                            attachDeleteOptionButton(optionDiv);
                    
    
    
                            //##############For preview Page ############
                            const questionInputs = document.querySelectorAll(".question");
                            questionInputs.forEach(questionInput => {
                                questionInput.addEventListener('input',populateQuestionsOnpreview)
                            })
            
                            const optionsInput = document.querySelectorAll(".options");
                                optionsInput.forEach(optionInput =>{
                                optionInput.addEventListener('input',populateQuestionsOnpreview);
                            })
                            //##############For preview Page ############
                        });
                        const questionInputs = document.querySelectorAll(".question");
                        questionInputs.forEach(questionInput => {
                            questionInput.addEventListener('input',populateQuestionsOnpreview)
                        })
        
                        const optionsInput = document.querySelectorAll(".options");
                            optionsInput.forEach(optionInput =>{
                            optionInput.addEventListener('input',populateQuestionsOnpreview);
                        })




                        function attachEventListeners(questionGroup) {
                    const addOptionButton = questionGroup.querySelector(".add-option-button");
                    const deleteQuestionButton = questionGroup.querySelector(".delete-question-button");
                    
                    addOptionButton.addEventListener("click", function() {
                            const optionsContainer = questionGroup.querySelector(".options-container");
                            const optionDiv = document.createElement("div");
                            optionDiv.classList.add("option");
                            optionDiv.innerHTML = `
                            <input type="text" class="options" name="option[]" placeholder="Option">
                            <button type="button" class="delete-option-button">Delete option</button>
                            `;
                            optionsContainer.appendChild(optionDiv);
                            attachDeleteOptionButton(optionDiv);
                            //########## for preview Page #########//
                            const optionsInput = optionDiv.querySelectorAll(".options");
                                optionsInput.forEach(optionInput =>{
                                optionInput.addEventListener('input',populateQuestionsOnpreview);
                                })
                            //########## for preview Page #########//
                            });
                        
                            deleteQuestionButton.addEventListener("click", function() {
                            populateQuestionsOnpreview();
                            questionGroup.remove();
                            });
                        }




                        function attachDeleteOptionButton(optionDiv) {
                            const deleteOptionButton = optionDiv.querySelector(".delete-option-button");
                            deleteOptionButton.addEventListener("click", function() {
                            optionDiv.remove();
                            });
                        }


                        populateQuestionsOnpreview();
                        function populateQuestionsOnpreview() {
                            const preview_question_container = document.querySelector('.preview_question_container');
                            const question_div = document.createElement('div');
                            const arr = extractQuestionsAndOptions()
                            preview_question_container.innerHTML = "";
                            
                            for (let i = 0; i < arr.length; i++) {
                                let optionsHTML = '';
                                if(arr[i].options.length == 0){
                                    question_div.innerHTML += `
                                    <p style="margin-bottom: 3px; color: black">${arr[i].question}</p>
                                    <input class="form_input" placeholder="Type here..."></input>
                                    `
                                }else{
                                    for (let j = 0; j < arr[i].options.length; j++) {
                                    optionsHTML += `
                                        <option value=${arr[i].options[j]}>${arr[i].options[j]}</option>
                                        `;
                                    }
                                    question_div.innerHTML += `
                                    <p style="margin-bottom: 3px; color: black">${arr[i].question}</p>
                                    <select>
                                    ${optionsHTML}  
                                    </select>
                                    `
                                }
                                preview_question_container.appendChild(question_div);
                            }
                        }

                        function extractQuestionsAndOptions(params) {
                        const questionInputs = document.querySelectorAll(".question");
                        const answers = [];
                    
                        questionInputs.forEach(questionInput => {
                        let optionsContainer = questionInput;
                        for (let i = 0; i < 3; i++) {
                            optionsContainer = optionsContainer.nextElementSibling;
                        }
                        const questionText = questionInput.value;
                        const optionsInputs = optionsContainer.querySelectorAll('.option input');
                        const options = [];
                        optionsInputs.forEach(optionInput => {
                            options.push(optionInput.value);
                        });
                        answers.push({ question: questionText, options: options });
                        });
                        return answers;
                    }


                }

                async function edit_Form_show(btn) {
                const formId = btn.getAttribute("form_id")
                overlay.style.display = "block";
                const {form} = await fetchFormDetail(formId);
                populateEditForm(form);
                document.getElementById("form_popup").classList.add("open_popup");
                document.getElementById("form_popup").classList.remove("close_popup");
            }
   
                </script>
        <%}%>
    </script>
        </body>

</html>
